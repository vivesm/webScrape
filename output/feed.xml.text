Okta Developer
Secure, scalable, and highly available authentication and user management for any app.
https://developer.okta.com
Astronomy Geek to Oktanaut: Landing as a Dev Advocate at Okta
<p>I‚Äôm Akanksha Bhasin, and I‚Äôm all about building community for developers. I come from a developer background, and for over six years, I‚Äôve been building and growing communities for developers. On top of that, I‚Äôve spent the last four years diving into Developer Relations. I‚Äôve had the chance to work with some fast-growing companies, helping them build their communities worldwide. That means getting the word out about emerging tech to developers, organizing significant events and hackathons, speaking at conferences, fostering partnerships, and supporting open-source projects.</p>
<p>My lifelong curiosity, from early science experiments and a fascination with astronomy,  has propelled me into an exciting new orbit: officially becoming an Oktanaut at Okta! üöÄüå†üßë‚ÄçüöÄ</p>
<h2 id="my-journey-into-the-tech-world">My journey into the tech world</h2>
<p>My tech journey has been quite a ride! I began by experimenting with various things, including Arduino, different aspects of programming, and building AI applications.</p>
<p>What piqued my interest wasn‚Äôt just web development and the scope of AI applications. Back in 2018, when Google Assistant came out, I was fascinated by how voice could fit into our everyday lives, from controlling appliances to using apps, all with your voice! So, I started building Voice AI applications for Google Assistant and Alexa and eventually began teaching what I learned at professional meetups and colleges all over India, which then led to being featured at Google I/O for my work in Voice AI.</p>
<p><img src="/assets-jekyll/blog/akanksha-bhasin-intro/google-io-040415c1d0f67897eac126d6f8eb323feacc750c87bacd28681f0ca5598424ed.jpg" alt="Photo of Akanksha featured at Google I/O" width="800" class="center-image" /></p>
<h2 id="building-developer-communities-my-passion-and-journey">Building developer communities: my passion and journey</h2>
<p>Driven by a passion for community building that began with Voice AI technology, I later founded Women in Voice, India, to empower more women to build careers in tech. Alongside this endeavor, I‚Äôve delivered sessions worldwide, hosted hackathons and events, led Google Developer Groups on my campus, and volunteered to organize the largest DevFests in my region, which gathered 3,000+ developers.</p>
<p>My fondest memory has been in Mumbai, where I got to teach how to build AI applications in areas without much tech awareness and opportunities. Seeing someone‚Äôs face light up when they finally understood new technology was priceless and kept me going. Life is about giving back. Even if you have impacted just one person‚Äôs life, you have done something priceless.</p>
<p><img src="/assets-jekyll/blog/akanksha-bhasin-intro/wiv-award-ffff4597a70c67cc50cf7d129b0f9b13e87dda5e6a28675befa53169761bd375.jpg" alt="Akanksha won the Women in Voice award" width="800" class="center-image" /></p>
<h2 id="embracing-developer-advocacy-at-okta">Embracing developer advocacy at Okta</h2>
<p>I‚Äôm so excited to join the Okta team; it‚Äôs a pinch-me moment! I love our principle of ‚ÄúBuilding a world where identity belongs to you!‚Äù Innovation is thriving, and change is here, making this the opportune and crucial moment for security.</p>
<p>Identity security and access management are the shields and the first line of defense for any software. They wrap every API, CLI, and SaaS workload in a magnetic field of strong authentication and privileged access. Without it, a compromised credential can topple an entire software system, just like a small puncture in a spacesuit; the whole mission can fail. With that, security can‚Äôt remain a checklist item; instead, security is the foundational layer of every enterprise application. I want to be part of this mission to help independent software vendors (ISVs) and developers secure user identities in their applications!</p>
<h2 id="lets-connect">Let‚Äôs connect!</h2>
<p>When I‚Äôm not geeking out about tech, you‚Äôll probably find me dancing or exploring new places and cultures. If you catch me outside with my phone, I‚Äôm probably trying to capture a beautiful sky. These simple moments make me feel calm and happy. Connect with me on <a href="https://linkedin.com/in/akankshabhasin">LinkedIn</a>; I‚Äôd love to chat with you!</p>
Mon, 21 Apr 2025 00:00:00 -0500
https://developer.okta.com/blog/2025/04/21/akanksha-bhasin-intro
https://developer.okta.com/blog/2025/04/21/akanksha-bhasin-intro
Integrators Assemble!
<p>The Developer Podcast is back, focusing on all things integrator this season! In this introductory episode, you‚Äôll meet the hosts and learn what‚Äôs in store for the rest of the season. We‚Äôll get more hands-on with technical and architectural identity integration topics through the season.</p>
<div class="jekyll-youtube-plugin" style="text-align: center; margin-bottom: 1.25rem">
            <iframe width="700" height="394" style="max-width: 100%" src="https://www.youtube.com/embed/BrbzKxnjRPo" allowfullscreen="" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" frameborder="0"></iframe>
        </div>
<p>You can also find this eposode in audio form <a href="https://listen.casted.us/public/49/Workforce-Identity-Developer-Podcast-4ce90a5f/d26b5401/share/0a9c3239">on Casted</a> or your favorite source of podcasts. If it‚Äôs missing from your preferred podcast platform, please let us know in the comments below.</p>
<p>More episodes are coming soon, but if you can‚Äôt wait, check out <a href="/blog/2023/06/08/identity-developer-podcast">last season</a> for some still-relevant identity insights.</p>
Fri, 28 Feb 2025 00:00:00 -0500
https://developer.okta.com/blog/2025/02/28/podcast-season-2
https://developer.okta.com/blog/2025/02/28/podcast-season-2
Announcing Integrator Office Hours
<p>Are you working on an integration for the <a href="https://www.okta.com/integrations/">Okta Integration Network</a>(OIN)?</p>
<p>Would you like assistance designing, implementing, or submitting your integration?</p>
<p>Our Integrator Office Hours program is now open to all builders at all stages of integration development! To attend, simply sign up <a href="https://okta.zoom.us/zbook/joyce-morrell/okta-integration-office-hours">via Zoom</a>. If you share more details about your integration when you sign up, we‚Äôll make sure to have the right experts at your session!</p>
<p>You can also ask questions on the <a href="https://devforum.okta.com/c/questions/6">Developer Forum</a>.</p>
<p>For more about the OIN, see <a href="/blog/2024/11/06/introduction-to-okta-integration-network">this post</a> and the <a href="https://help.okta.com/en-us/content/topics/apps/apps-overview-get-started.htm">getting started documentation</a>.</p>
Tue, 28 Jan 2025 00:00:00 -0500
https://developer.okta.com/blog/2025/01/28/integrator-office-hours
https://developer.okta.com/blog/2025/01/28/integrator-office-hours
How to Submit Your System for Cross-domain Identity Management (SCIM) Integration to the Okta Integration Network
<p>You have an app with SSO capabilities. What else can you do with Okta to transform it into an enterprise-ready powerhouse?</p>
<p>Today‚Äôs enterprises face critical identity management challenges that directly impact their operations; this includes:</p>
<ul>
  <li>Rapid business growth outpacing their current user management capabilities</li>
  <li>Scattered user accounts creating administrative chaos</li>
  <li>User management that doesn‚Äôt scale with company growth (access free-for-all to resources)</li>
  <li>Bottlenecks in user provisioning slowing down productivity (i.e., manual provisioning)</li>
</ul>
<p>and more critically,</p>
<ul>
  <li>Security vulnerabilities from inconsistent user deprovisioning</li>
</ul>
<p>This is where you come in as a partner. By integrating with Okta through SCIM (System for Cross-domain Identity Management), a standard for managing users, you can offer enterprise customers a solution that addresses these pain points.</p>
<h2 id="why-system-for-cross-domain-identity-management-scim-is-your-gateway-to-enterprise-success">Why System for Cross-domain Identity Management (SCIM) is your gateway to enterprise success</h2>
<p>It facilitates:</p>
<ul>
  <li>Real-time user synchronization, which keeps customer organizations agile with instant updates as employees join, leave, or move within the company</li>
  <li>Automated lifecycle management, which eliminates manual processes with streamlined provisioning, updates, and de-provisioning</li>
  <li>Enhanced security controls, which give enterprises precise control over user access and permissions</li>
  <li>Standards-based integration, which leverages open Internet Engineering Task Force (IETF) protocols for reliable, interoperable, and consistent implementation</li>
  <li>Reduced operational complexity, which helps customers save on their identity management costs and overhead</li>
</ul>
<h2 id="accelerate-your-growth-by-joining-the-okta-integration-network-oin">Accelerate your growth by joining the Okta Integration Network (OIN)</h2>
<p>And once you have a SCIM-compliant integration with Okta, we invite you to <a href="https://www.okta.com/integrations/">Okta‚Äôs Integration Network (OIN)</a>. Here, you can unlock potential growth by tapping into Okta‚Äôs massive customer base of 18,000+ organizations, including leading companies and government institutions that rely on Okta as their identity security foundation. Furthermore, fast-track enterprise deals with your pre-built integration and reduces sales friction with verified enterprise-ready status. More importantly, you‚Äôll be able to differentiate your offering with premium security features.</p>
<h2 id="how-to-submit-your-scim-integration-to-the-okta-integration-network-oin">How to submit your SCIM integration to the Okta Integration Network (OIN)</h2>
<p>Here is a video walkthrough on creating your SCIM provisioning instance for OIN testing and submission.</p>
<div class="jekyll-youtube-plugin" style="text-align: center; margin-bottom: 1.25rem">
            <iframe width="700" height="394" style="max-width: 100%" src="https://www.youtube.com/embed/xbX0Kxi9wik" allowfullscreen="" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" frameborder="0"></iframe>
        </div>
<p><strong>Prerequisites</strong></p>
<ul>
  <li><a href="https://developer.okta.com/signup/">Okta Developer Account</a></li>
  <li>Runscope test links (2): <a href="https://developer.okta.com/docs/guides/submit-oin-app/scim/main/#runscope-crud-tests">CRUD</a> and <a href="https://developer.okta.com/docs/guides/scim-provisioning-integration-prepare/main/#test-your-scim-api">SPEC</a> tests</li>
  <li><a href="https://developer.okta.com/docs/guides/submit-oin-app/scim/main/#manual-okta-scim-integration-tests">Manual Okta SCIM integration tests</a></li>
  <li>Provisioning-enabled instance and confirmation</li>
</ul>
<p>Lastly, you must have a publicly accessible SCIM server for Okta to send requests to. I used the SCIM server from this <a href="/blog/2023/07/28/scim-workshop">Enterprise Workshop on SCIM</a> to demo the submission process.</p>
<h2 id="learn-more-about-secure-identity-integrations">Learn more about Secure Identity Integrations</h2>
<p>For more resources, check out Okta‚Äôs <a href="https://www.okta.com/saas-security/">Saas Security page</a> and <a href="https://support.okta.com/help/s/product-hub/application-integrations?language=en_US">integrator help hub</a>.</p>
<h2 id="enterprise-workshop-series-on-building-a-scim-server-and-other-integrations">Enterprise workshop series on building a SCIM server and other integrations</h2>
<table>
  <thead>
    <tr>
      <th>Posts in the on-demand workshop series</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1. <a href="/blog/2023/07/27/enterprise-ready-getting-started">How to Get Going with the On-Demand SaaS Apps Workshops</a></td>
    </tr>
    <tr>
      <td>2. <a href="/blog/2023/07/28/oidc_workshop">Enterprise-Ready Workshop: Authenticate with OpenID Connect</a></td>
    </tr>
    <tr>
      <td>3. <a href="/blog/2023/07/28/scim-workshop">Enterprise-Ready Workshop: Manage Users with SCIM</a></td>
    </tr>
    <tr>
      <td>4. <a href="/blog/2023/07/28/terraform-workshop">Enterprise Maturity Workshop: Terraform</a></td>
    </tr>
    <tr>
      <td>5. <a href="/blog/2023/09/15/workflows-workshop">Enterprise Maturity Workshop: Automate with no-code Okta Workflows</a></td>
    </tr>
    <tr>
      <td>6. <a href="/blog/2024/04/30/express-universal-logout">Enterprise-Ready Workshop: How to Instantly Sign a User Out Across All Your Apps</a></td>
    </tr>
  </tbody>
</table>
<h2 id="stay-in-touch">Stay in touch!</h2>
<p>Follow OktaDev on <a href="https://twitter.com/oktadev">X</a> and subscribe to our <a href="https://www.youtube.com/c/OktaDev/">YouTube channel</a> to learn about additional integrator resources as soon as they‚Äôre available. We also want to hear from you about topics you want to see and questions you may have. Leave us a comment below!</p>
Mon, 30 Dec 2024 00:00:00 -0500
https://developer.okta.com/blog/2024/12/30/scim-okta-integration-network
https://developer.okta.com/blog/2024/12/30/scim-okta-integration-network
Introduction to the Okta Integration Network
<p>Whether or not you use Okta‚Äôs products, you may find yourself working on software whose target audience includes Okta customers. Adding your application to the Okta Integration Network creates a smoother and less error-prone user management experience for these shared customers, and can unlock the potential of additional features as well.</p>
<p>For a high-level perspective on the benefits of building to the open standards supported by the OIN, which also lets you easily support any other identity provider‚Äôs integration marketplace, here‚Äôs Director of Identity Standards Aaron Parecki:</p>
<div class="jekyll-youtube-plugin" style="text-align: center; margin-bottom: 1.25rem">
            <iframe width="700" height="394" style="max-width: 100%" src="https://www.youtube.com/embed/YIvslsPaknI" allowfullscreen="" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" frameborder="0"></iframe>
        </div>
<p>And to learn about what the integration submission process looks like on a more technical level, the OIN 101 Walkthrough can help:</p>
<div class="jekyll-youtube-plugin" style="text-align: center; margin-bottom: 1.25rem">
            <iframe width="700" height="394" style="max-width: 100%" src="https://www.youtube.com/embed/aHvSrXoOWDw" allowfullscreen="" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" frameborder="0"></iframe>
        </div>
<p>Check out Okta‚Äôs <a href="https://www.okta.com/saas-security/">Saas Security page</a> and <a href="https://support.okta.com/help/s/product-hub/application-integrations?language=en_US">integrator help hub</a> for more resources.</p>
<p>Follow OktaDev on <a href="https://twitter.com/oktadev">Twitter</a> and subscribe to our <a href="https://www.youtube.com/c/OktaDev/">YouTube channel</a> to learn about additional integrator resources as soon as they‚Äôre available. We also want to hear from you about topics you want to see and questions you may have. Leave us a comment below!</p>
Wed, 06 Nov 2024 00:00:00 -0500
https://developer.okta.com/blog/2024/11/06/introduction-to-okta-integration-network
https://developer.okta.com/blog/2024/11/06/introduction-to-okta-integration-network
How to Build Secure Okta Node.js Integrations with DPoP
<p>Integrating with Okta management API endpoints might be a good idea if you are trying to read or manage Okta resources programmatically. This blog demonstrates how to securely set up a node application to interact with Okta management API endpoints using a service app.</p>
<p>Okta API management endpoints can be accessed using an access token issued by the Okta org authorization server with the appropriate scopes needed to make an API call. This can be either through authorization code flow for the user as principal or client credentials flow for a service as principal.</p>
<p>For this blog, we will examine the OAuth 2.0 client credentials flow. Okta requires the <code class="language-plaintext highlighter-rouge">private_key_jwt</code> token endpoint authentication type for this flow. Access tokens generated by the Okta org authorization server expire in one hour. Any client can call Okta API endpoints with the token during this hour.</p>
<h2 id="how-do-you-make-oauth-20-access-tokens-more-secure">How do you make OAuth 2.0 access tokens more secure?</h2>
<p>Increase security by constraining the token to the sender. By constraining the token sender, the resource server knows every request originates from the original client that initially requested the token. OAuth 2.0 Demonstrating Proof of Possession (DPoP) is a way to achieve this, as explained in <a href="https://datatracker.ietf.org/doc/html/rfc9449">this rfc</a>. You can read more about DPoP in this post:</p>
<article class="link-container" style="border: 1px solid silver; border-radius: 3px; padding: 12px 15px">
              <a href="/blog/2024/09/05/dpop-oauth" style="font-size: 1.375em; margin-bottom: 20px;">
                <span>Elevate Access Token Security by Demonstrating Proof-of-Possession</span>
              </a>
              <p>Protect your OAuth 2.0 access token with sender constraints. Learn about possession proof tokens using DPoP.</p>
              <div><div class="BlogPost-attribution">
            <a href="/blog/authors/alisa-duncan/">
              <img src="/assets-jekyll/avatar-alisa_duncan-b29fa4df50f5c99f536307c6bc0e5cb3434a922bdada7fe4f4b3cf8488299465.jpg" alt="avatar-avatar-alisa_duncan.jpeg" class="BlogPost-avatar" />
            </a>
            <span class="BlogPost-author">
                <a href="/blog/authors/alisa-duncan/">Alisa Duncan</a>
            </span>
          </div></div>
          </article>
<p>To demonstrate this, we will first set up a node application with a service app without requiring DPoP. Then, we‚Äôll add the DPoP constraint and make the necessary changes in our app to implement it.</p>
<p><strong class="hide">Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#how-do-you-make-oauth-20-access-tokens-more-secure" id="markdown-toc-how-do-you-make-oauth-20-access-tokens-more-secure">How do you make OAuth 2.0 access tokens more secure?</a></li>
  <li><a href="#create-a-service-app-with-oauth-20-client-credentials-without-dpop" id="markdown-toc-create-a-service-app-with-oauth-20-client-credentials-without-dpop">Create a service app with OAuth 2.0 client credentials without DPoP</a></li>
  <li><a href="#add-oauth-20-and-openid-connect-oidc-to-your-nodejs-service-application" id="markdown-toc-add-oauth-20-and-openid-connect-oidc-to-your-nodejs-service-application">Add OAuth 2.0 and OpenID Connect (OIDC) to your Node.js service application</a>    <ul>
      <li><a href="#configure-oauth-20-in-the-nodejs-service" id="markdown-toc-configure-oauth-20-in-the-nodejs-service">Configure OAuth 2.0 in the Node.js service</a></li>
    </ul>
  </li>
  <li><a href="#create-an-oauth-20-compliant-nodejs-service-app" id="markdown-toc-create-an-oauth-20-compliant-nodejs-service-app">Create an OAuth 2.0-compliant Node.js service app</a></li>
  <li><a href="#secure-access-tokens-by-adding-dpop-to-the-nodejs-service" id="markdown-toc-secure-access-tokens-by-adding-dpop-to-the-nodejs-service">Secure access tokens by adding DPoP to the Node.js service</a></li>
  <li><a href="#experiment-with-dpop-and-api-scopes-for-okta-api-and-custom-resource-server-calls" id="markdown-toc-experiment-with-dpop-and-api-scopes-for-okta-api-and-custom-resource-server-calls">Experiment with DPoP and API scopes for Okta API and custom resource server calls</a></li>
  <li><a href="#learn-more-about-okta-management-api-dpop-and-oauth-20" id="markdown-toc-learn-more-about-okta-management-api-dpop-and-oauth-20">Learn more about Okta Management API, DPoP, and OAuth 2.0</a></li>
</ul>
<h2 id="create-a-service-app-with-oauth-20-client-credentials-without-dpop">Create a service app with OAuth 2.0 client credentials without DPoP</h2>
<p><strong>Prerequisites</strong></p>
<p>You‚Äôll need the following tools:</p>
<ul>
  <li><a href="https://nodejs.org/en">Node.js</a> v18 or greater</li>
  <li>IDE (I used <a href="https://code.visualstudio.com/">VS Code</a>)</li>
  <li>Terminal window (I used the integrated terminal in VS Code)</li>
</ul>
<h2 id="add-oauth-20-and-openid-connect-oidc-to-your-nodejs-service-application">Add OAuth 2.0 and OpenID Connect (OIDC) to your Node.js service application</h2>
<p>Before you begin, you‚Äôll need a free Okta developer edition account. Sign up for a free <a href="https://developer.okta.com/signup/">Workforce Identity Cloud Developer Edition account</a> if you don‚Äôt already have one.</p>
<p>Open <a href="https://developer.okta.com/login/">your Okta dashboard</a> in a browser. Navigate to <strong>Applications</strong> &gt; <strong>Applications</strong>. Select <strong>API Services</strong> and press <strong>Next</strong>. Name your application and press <strong>Save</strong>.</p>
<ol>
  <li>In the General tab, note the <strong>Client ID</strong> value and your Okta domain. You can find the Okta domain by expanding the settings menu in the toolbar. You need these values for your application configuration.</li>
  <li>Press edit in the <strong>Client Credentials</strong> section and follow these steps:</li>
  <li>Change the <strong>Client authentication</strong> to <code class="language-plaintext highlighter-rouge">Public Key / Private Key</code></li>
  <li>In the <strong>PUBLIC KEYS</strong> section, press the <strong>Add key</strong> button. Click <strong>Generate new key</strong> to have Okta generate a new key. Save the private key (in PEM format)  in a file called <code class="language-plaintext highlighter-rouge">cc_private_key.pem</code> for later use.</li>
  <li>Press <strong>Save</strong></li>
</ol>
<p>In <em>General Settings</em> section, press edit and make the following changes:</p>
<ul>
  <li>Disable <strong>Proof of possession</strong> &gt; <strong>Require Demonstrating Proof of Possession (DPoP) header in token requests</strong></li>
  <li>Press <strong>Save</strong></li>
</ul>
<p>Navigate to the <strong>Okta API Scopes</strong> tab and grant the <code class="language-plaintext highlighter-rouge">okta.users.read</code> scope.</p>
<p>In the <strong>Admin roles</strong> tab, press <strong>Edit assignments</strong>. Find the <code class="language-plaintext highlighter-rouge">Read-only Administrator</code> in the <strong>Role</strong> selection menu, and press the <strong>Save Changes</strong> button.</p>
<p>Those are all of the changes required in Okta until you re-enable DPoP.</p>
<h3 id="configure-oauth-20-in-the-nodejs-service">Configure OAuth 2.0 in the Node.js service</h3>
<p>Create a project directory for local development named <code class="language-plaintext highlighter-rouge">okta-node-dpop</code>. Open the project directory in your IDE. Create a file called <code class="language-plaintext highlighter-rouge">.env</code> file to the project root directory and add the following configuration settings:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>OKTA_ORG_URL=
https://{yourOktaDomain}
OKTA_CLIENT_ID={yourClientID}
OKTA_SCOPES=okta.users.read
OKTA_CC_PRIVATE_KEY_FILE=./assets/cc_private_key.pem
</code></pre></div></div>
<p>Save the private key file from the earlier step as <code class="language-plaintext highlighter-rouge">assets/cc_private_key.pem</code> in the root directory.</p>
<h2 id="create-an-oauth-20-compliant-nodejs-service-app">Create an OAuth 2.0-compliant Node.js service app</h2>
<p>Open a terminal window in the project directory and run <code class="language-plaintext highlighter-rouge">npm init</code> to create the scaffolding. Press <kbd>Enter</kbd> to accept all defaults.</p>
<p>Install dependencies for the project by running:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i dotenv@16.4.5 jsonwebtoken@9.0.2
</code></pre></div></div>
<p>Create an <code class="language-plaintext highlighter-rouge">oktaService.js</code> file in the project root. We‚Äôll add the basic foundation of authenticating and calling Okta endpoints in this file. This file contains three key functions:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">oktaService.authenticate(..)</code> method gets an access token by:
    <ul>
      <li>Generating a private key JWT required for authenticating and signs it using a keypair registered in the Okta application</li>
      <li>Generating the token request to Okta org authorization server</li>
      <li>Retrieving and stores the access token for future calls
<strong>Note</strong> - This token is valid for one hour by default at the time of writing this article</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">oktaService.managementApiCall(..)</code> method makes the Okta management API calls and adds the necessary headers and tokens to enable the request</li>
  <li><code class="language-plaintext highlighter-rouge">oktaHelper</code> contains utility methods to store okta configuration, access token, generating private key JWT, generating token request</li>
</ul>
<p>Add the following code to the <code class="language-plaintext highlighter-rouge">oktaService.js</code> file:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">fs</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">crypto</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">crypto</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">jwt</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">jsonwebtoken</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">dotenv</span><span class="dl">"</span><span class="p">).</span><span class="nx">config</span><span class="p">();</span> <span class="c1">// Loads variables in .env file into the environment</span>
<span class="kd">const</span> <span class="nx">oktaHelper</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">oktaDomain</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">OKTA_ORG_URL</span> <span class="o">||</span> <span class="dl">""</span><span class="p">,</span> <span class="c1">// Okta domain URL</span>
  <span class="na">oktaClientId</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">OKTA_CLIENT_ID</span> <span class="o">||</span> <span class="dl">""</span><span class="p">,</span> <span class="c1">// Client ID of API service app</span>
  <span class="na">oktaScopes</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">OKTA_SCOPES</span> <span class="o">||</span> <span class="dl">""</span><span class="p">,</span> <span class="c1">// Scopes requested - Okta management API scopes</span>
  <span class="na">ccPrivateKeyFile</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">OKTA_CC_PRIVATE_KEY_FILE</span> <span class="o">||</span> <span class="dl">""</span><span class="p">,</span> <span class="c1">// Private Key for signing Private key JWT</span>
  <span class="na">ccPrivateKey</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="na">accessToken</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
  <span class="na">getTokenEndpoint</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s2">`</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">oktaDomain</span><span class="p">}</span><span class="s2">/oauth2/v1/token`</span><span class="p">;</span>
  <span class="p">},</span> <span class="c1">// Token endpoint</span>
  <span class="na">getNewJti</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">randomBytes</span><span class="p">(</span><span class="mi">32</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="dl">"</span><span class="s2">hex</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">},</span> <span class="c1">// Helper method to generate new identifier</span>
  <span class="na">generateCcToken</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Helper method to generate private key jwt</span>
    <span class="kd">let</span> <span class="nx">privateKey</span> <span class="o">=</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">ccPrivateKey</span> <span class="o">||</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ccPrivateKeyFile</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">signingOptions</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">algorithm</span><span class="p">:</span> <span class="dl">"</span><span class="s2">RS256</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">expiresIn</span><span class="p">:</span> <span class="dl">"</span><span class="s2">5m</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">audience</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">getTokenEndpoint</span><span class="p">(),</span>
      <span class="na">issuer</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">oktaClientId</span><span class="p">,</span>
      <span class="na">subject</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">oktaClientId</span><span class="p">,</span>
    <span class="p">};</span>
    <span class="k">return</span> <span class="nx">jwt</span><span class="p">.</span><span class="nx">sign</span><span class="p">({</span> <span class="na">jti</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">getNewJti</span><span class="p">()</span> <span class="p">},</span> <span class="nx">privateKey</span><span class="p">,</span> <span class="nx">signingOptions</span><span class="p">);</span>
  <span class="p">},</span>
  <span class="na">tokenRequest</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">ccToken</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// generate token request using client_credentials grant type</span>
    <span class="k">return</span> <span class="nx">fetch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getTokenEndpoint</span><span class="p">(),</span> <span class="p">{</span>
      <span class="na">method</span><span class="p">:</span> <span class="dl">"</span><span class="s2">POST</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">Accept</span><span class="p">:</span> <span class="dl">"</span><span class="s2">application/json</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">Content-Type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">application/x-www-form-urlencoded</span><span class="dl">"</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="na">body</span><span class="p">:</span> <span class="k">new</span> <span class="nx">URLSearchParams</span><span class="p">({</span>
        <span class="na">grant_type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">client_credentials</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">scope</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">oktaScopes</span><span class="p">,</span>
        <span class="na">client_assertion_type</span><span class="p">:</span>
          <span class="dl">"</span><span class="s2">urn:ietf:params:oauth:client-assertion-type:jwt-bearer</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">client_assertion</span><span class="p">:</span> <span class="nx">ccToken</span><span class="p">,</span>
      <span class="p">}),</span>
    <span class="p">});</span>
  <span class="p">},</span>
<span class="p">};</span>
<span class="kd">const</span> <span class="nx">oktaService</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">authenticate</span><span class="p">:</span> <span class="k">async</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Use to authenticate and generate access token</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">oktaHelper</span><span class="p">.</span><span class="nx">accessToken</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Valid access token not found. Retrieving new token...</span><span class="se">\n</span><span class="dl">"</span><span class="p">);</span>
      <span class="kd">let</span> <span class="nx">ccToken</span> <span class="o">=</span> <span class="nx">oktaHelper</span><span class="p">.</span><span class="nx">generateCcToken</span><span class="p">();</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Using Private Key JWT: </span><span class="p">${</span><span class="nx">ccToken</span><span class="p">}</span><span class="s2">\n`</span><span class="p">);</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Making token call to </span><span class="p">${</span><span class="nx">oktaHelper</span><span class="p">.</span><span class="nx">getTokenEndpoint</span><span class="p">()}</span><span class="s2">`</span><span class="p">);</span>
      <span class="kd">let</span> <span class="nx">tokenResp</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">oktaHelper</span><span class="p">.</span><span class="nx">tokenRequest</span><span class="p">(</span><span class="nx">ccToken</span><span class="p">);</span>
      <span class="kd">let</span> <span class="nx">respBody</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">tokenResp</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
      <span class="nx">oktaHelper</span><span class="p">.</span><span class="nx">accessToken</span> <span class="o">=</span> <span class="nx">respBody</span><span class="p">[</span><span class="dl">"</span><span class="s2">access_token</span><span class="dl">"</span><span class="p">];</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
        <span class="s2">`Successfully retrieved access token: </span><span class="p">${</span><span class="nx">oktaHelper</span><span class="p">.</span><span class="nx">accessToken</span><span class="p">}</span><span class="s2">\n`</span>
      <span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">oktaHelper</span><span class="p">.</span><span class="nx">accessToken</span><span class="p">;</span>
  <span class="p">},</span>
  <span class="na">managementApiCall</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">relativeUri</span><span class="p">,</span> <span class="nx">httpMethod</span><span class="p">,</span> <span class="nx">headers</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Construct Okta management API calls</span>
    <span class="kd">let</span> <span class="nx">uri</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">oktaHelper</span><span class="p">.</span><span class="nx">oktaDomain</span><span class="p">}${</span><span class="nx">relativeUri</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
    <span class="kd">let</span> <span class="nx">reqHeaders</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">Accept</span><span class="p">:</span> <span class="dl">"</span><span class="s2">application/json</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">Authorization</span><span class="p">:</span> <span class="s2">`Bearer </span><span class="p">${</span><span class="nx">oktaHelper</span><span class="p">.</span><span class="nx">accessToken</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span>
      <span class="p">...</span><span class="nx">headers</span><span class="p">,</span>
    <span class="p">};</span>
    <span class="k">return</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">uri</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">method</span><span class="p">:</span> <span class="nx">httpMethod</span><span class="p">,</span>
      <span class="na">headers</span><span class="p">:</span> <span class="nx">reqHeaders</span><span class="p">,</span>
      <span class="nx">body</span><span class="p">,</span>
    <span class="p">});</span>
  <span class="p">},</span>
<span class="p">};</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">oktaService</span><span class="p">;</span>
</code></pre></div></div>
<p>Add a new file named <code class="language-plaintext highlighter-rouge">app.js</code> in the project root folder. This is the entry point for running our Node.js service application. In this file, we‚Äôll do the following:</p>
<ul>
  <li>Import <code class="language-plaintext highlighter-rouge">oktaService</code></li>
  <li>Create an async wrapper to execute asynchronous code</li>
  <li>Authenticate to Okta by calling <code class="language-plaintext highlighter-rouge">oktaService.authenticate()</code></li>
  <li>Validate the previous step by listing users using a <code class="language-plaintext highlighter-rouge">GET</code> call to Okta‚Äôs <code class="language-plaintext highlighter-rouge">/api/v1/users</code> endpoint</li>
</ul>
<p>Paste the following code into the <code class="language-plaintext highlighter-rouge">app.js</code> file:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">oktaService</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./oktaService.js</span><span class="dl">'</span><span class="p">);</span>
<span class="p">(</span><span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">await</span> <span class="nx">oktaService</span><span class="p">.</span><span class="nx">authenticate</span><span class="p">();</span>
  <span class="kd">let</span> <span class="nx">usersResp</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">oktaService</span><span class="p">.</span><span class="nx">managementApiCall</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/v1/users</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">);</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">usersResp</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">respBody</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">usersResp</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Users List: </span><span class="p">${</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">respBody</span><span class="p">)}</span><span class="s2">\n`</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">API error</span><span class="dl">'</span><span class="p">,</span> <span class="nx">usersResp</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">})();</span>
</code></pre></div></div>
<p>Next, update this as the entry point. In the <code class="language-plaintext highlighter-rouge">package.json</code> file, update the <code class="language-plaintext highlighter-rouge">scripts</code> property with the following:</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"node app.js"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>This gives us an easy way to run the app. Run the app using <code class="language-plaintext highlighter-rouge">npm start</code>. You should see a list of console logs:</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">Valid access token not found. Retrieving new token...
Using Private Key JWT: eyJh........
Making token call to https://........../oauth2/v1/token
Successfully retrieved access token: eyJ..................
Users List: [.........]
</span></code></pre></div></div>
<p>If you receive any errors, this is a good time to troubleshoot and resolve issues before adding <strong>DPoP</strong>.</p>
<h2 id="secure-access-tokens-by-adding-dpop-to-the-nodejs-service">Secure access tokens by adding DPoP to the Node.js service</h2>
<p>Why isn‚Äôt OAuth 2.0 client credential flow enough?</p>
<p>Our setup used the <code class="language-plaintext highlighter-rouge">client_credentials</code> grant type to authenticate and get an access token. If someone gets hold of the private_key_jwt, they cannot replay it beyond expiration (I reduced it to 5 minutes to shorten this window). However, if someone gets ahold of the access token, they can use it for up to 1 hour, which is the default expiration time of an access token.</p>
<p>Constraining the token sender is one way to make the access token more secure. How can you do that? By adding the Demonstrating Proof of Possession (DPoP) OAuth extension method to the access token interaction. The technique adds a sender-generated token for each call it makes. Doing so prevents replay attacks even before tokens expire since each call needs a fresh DPoP token. Here is the detailed flow:</p>
<p><img src="/assets-jekyll/blog/dpop-oauth-node/dpopflow-81663bf00323fb579e7e7f2ff2ff029de8d75b7d9cc3974b50faa444813b458d.jpg" alt="Sequence diagram that displays the back and forth between the client, authorization server, and resource server for Demonstrating Proof-of-Possession" width="800" class="center-image" /></p>
<p>You‚Äôll enable DPoP in Okta application settings to experiment with sender-constrained tokens. Open the Okta Admin Console in your browser and navigate to <strong>Application</strong> &gt; <strong>Application</strong> to see the list of Okta applications in your Okta account. Open the service application to edit it.</p>
<p>In your service app‚Äôs <strong>General Settings</strong> section, change <strong>Proof of possession</strong> &gt; <strong>Require Demonstrating Proof of Possession (DPoP) header in token requests</strong> to <code class="language-plaintext highlighter-rouge">true</code>. Then click <strong>Save</strong>.</p>
<p>You need a new public/private key pair to sign the DPoP proof JWT. If you know how to generate one, feel free to skip this step. I used the following steps to generate it:</p>
<ul>
  <li>Go to <a href="https://mkjwk.org/">JWK generator</a></li>
  <li>Select the following and then click Generate.
    <ul>
      <li>Key Use: Signature</li>
      <li>Algorithm: RS256</li>
      <li>Key ID: SHA-256</li>
      <li>Show X.509: Yes</li>
    </ul>
  </li>
  <li>Copy the Public Key (JSON format) and save it to <code class="language-plaintext highlighter-rouge">assets/dpop_public_key.json</code></li>
  <li>Copy the Private Key (X.509 PEM format) (<strong>Do not click Copy to Clipboard. This will copy as a single line, which will not work with the following steps. Instead, copy the value manually and save it</strong>) and save it to <code class="language-plaintext highlighter-rouge">assets/dpop_private_key.pem</code></li>
</ul>
<p>Now that you have a new keypair for DPoP, you‚Äôll add the variables to the project. In the <code class="language-plaintext highlighter-rouge">.env</code> file, add the new file paths:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>....
OKTA_SCOPES=okta.users.read
OKTA_CC_PRIVATE_KEY_FILE=./assets/cc_private_key.pem
OKTA_DPOP_PRIVATE_KEY_FILE=./assets/dpop_private_key.pem
OKTA_DPOP_PUBLIC_KEY_FILE=./assets/dpop_public_key.json
</code></pre></div></div>
<p>Add the DPoP-related code to <code class="language-plaintext highlighter-rouge">oktaService.js</code>. Add the key files to config. We can use this while adding DPoP to our methods:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">oktaHelper</span> <span class="o">=</span> <span class="p">{</span>
  <span class="p">.......</span>
  <span class="na">ccPrivateKeyFile</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">OKTA_CC_PRIVATE_KEY_FILE</span> <span class="o">||</span> <span class="dl">''</span><span class="p">,</span> <span class="c1">// Private Key for signing Private key JWT</span>
  <span class="na">ccPrivateKey</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="c1">// Add this code ======================</span>
  <span class="na">dpopPrivateKeyFile</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">OKTA_DPOP_PRIVATE_KEY_FILE</span> <span class="o">||</span> <span class="dl">''</span><span class="p">,</span> <span class="c1">// Private key for signing DPoP proof JWT</span>
  <span class="na">dpopPublicKeyFile</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">OKTA_DPOP_PUBLIC_KEY_FILE</span> <span class="o">||</span> <span class="dl">''</span><span class="p">,</span> <span class="c1">// Public key for signing DPoP proof JWT</span>
  <span class="na">dpopPrivateKey</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="na">dpopPublicKey</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="c1">// Add above code ======================</span>
  <span class="na">accessToken</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
  <span class="p">.....</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Add a helper method to generate a DPoP value. This helper method adds an access token to the DPoP proof JWT header. It‚Äôll construct the JWT based on the format defined in <a href="https://datatracker.ietf.org/doc/html/rfc9449#section-4.2">spec</a>.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">oktaHelper</span> <span class="o">=</span> <span class="p">{</span>
  <span class="p">.....</span>
  <span class="c1">// Add this as the last attribute of oktaHelper object</span>
  <span class="na">generateDpopToken</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">htm</span><span class="p">,</span> <span class="nx">htu</span><span class="p">,</span> <span class="nx">additionalClaims</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">privateKey</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">dpopPrivateKey</span> <span class="o">||</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">dpopPrivateKeyFile</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">publicKey</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">dpopPublicKey</span> <span class="o">||</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">dpopPublicKeyFile</span><span class="p">)</span>
    <span class="kd">let</span> <span class="nx">signingOptions</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">algorithm</span><span class="p">:</span> <span class="dl">'</span><span class="s1">RS256</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">expiresIn</span><span class="p">:</span> <span class="dl">'</span><span class="s1">5m</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">header</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">typ</span><span class="p">:</span> <span class="dl">'</span><span class="s1">dpop+jwt</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">alg</span><span class="p">:</span> <span class="dl">'</span><span class="s1">RS256</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">jwk</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">publicKey</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">};</span>
    <span class="kd">let</span> <span class="nx">payload</span> <span class="o">=</span> <span class="p">{</span>
      <span class="p">...</span><span class="nx">additionalClaims</span><span class="p">,</span>
      <span class="nx">htu</span><span class="p">,</span>
      <span class="nx">htm</span><span class="p">,</span>
      <span class="na">jti</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">getNewJti</span><span class="p">()</span>
    <span class="p">};</span>
    <span class="k">return</span> <span class="nx">jwt</span><span class="p">.</span><span class="nx">sign</span><span class="p">(</span><span class="nx">payload</span><span class="p">,</span> <span class="nx">privateKey</span><span class="p">,</span> <span class="nx">signingOptions</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>
<p>Next, add the DPoP proof token to the <code class="language-plaintext highlighter-rouge">tokenRequest</code> method. This method gets the newly generated DPoP proof token and adds it to the token request as a header.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Add dpopToken as a new parameter</span>
<span class="nx">tokenRequest</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ccToken</span><span class="p">,</span> <span class="nx">dpopToken</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// generate token request using client_credentials grant type</span>
  <span class="k">return</span> <span class="nx">fetch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getTokenEndpoint</span><span class="p">(),</span> <span class="p">{</span>
    <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">Accept</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span><span class="p">,</span>
      <span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/x-www-form-urlencoded</span><span class="dl">'</span><span class="p">,</span>
      <span class="c1">// New Code - Start</span>
      <span class="na">DPoP</span><span class="p">:</span> <span class="nx">dpopToken</span>
      <span class="c1">// New Code - End</span>
    <span class="p">},</span>
    <span class="p">...</span>
  <span class="p">});</span>
<span class="p">},</span>
</code></pre></div></div>
<p>Add the following steps to the <code class="language-plaintext highlighter-rouge">authenticate</code> method to add DPoP.</p>
<ul>
  <li>Generate a new DPoP proof for <code class="language-plaintext highlighter-rouge">POST</code> method and <em>token endpoint</em></li>
  <li>Make token call with both <code class="language-plaintext highlighter-rouge">private_key_jwt</code> and <code class="language-plaintext highlighter-rouge">DPoP</code> jwt</li>
  <li>Okta adds an extra security measure by adding a <code class="language-plaintext highlighter-rouge">nonce</code> to token requests requiring DPoP. This will respond to token requests that don‚Äôt include a nonce with the <code class="language-plaintext highlighter-rouge">use_dpop_nonce</code> error. Read more about the nonce <a href="https://datatracker.ietf.org/doc/html/rfc9449#name-authorization-server-provid">in the spec</a>.</li>
  <li>After this step, we‚Äôll generate a new DPoP proof JWT including nonce value in payload</li>
  <li>Make the token call again with this new JWT</li>
</ul>
<p>Once we follow these steps, we‚Äôll have a new access token to use in our API call. Let‚Äôs implement the steps. Update the <code class="language-plaintext highlighter-rouge">authenticate</code> method to the following:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">authenticate</span><span class="p">:</span> <span class="k">async</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// Use to authenticate and generate access token</span>
  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">oktaHelper</span><span class="p">.</span><span class="nx">accessToken</span><span class="p">)</span> <span class="p">{</span> 
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Valid access token not found. Retrieving new token...</span><span class="se">\n</span><span class="dl">'</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">ccToken</span> <span class="o">=</span> <span class="nx">oktaHelper</span><span class="p">.</span><span class="nx">generateCcToken</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Using Private Key JWT: </span><span class="p">${</span><span class="nx">ccToken</span><span class="p">}</span><span class="s2">\n`</span><span class="p">);</span>
    <span class="c1">// New Code - Start</span>
    <span class="kd">let</span> <span class="nx">dpopToken</span> <span class="o">=</span> <span class="nx">oktaHelper</span><span class="p">.</span><span class="nx">generateDpopToken</span><span class="p">(</span><span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span> <span class="nx">oktaHelper</span><span class="p">.</span><span class="nx">getTokenEndpoint</span><span class="p">());</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Using DPoP proof: </span><span class="p">${</span><span class="nx">dpopToken</span><span class="p">}</span><span class="s2">\n`</span><span class="p">);</span>
    <span class="c1">// New Code - End</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Making token call to </span><span class="p">${</span><span class="nx">oktaHelper</span><span class="p">.</span><span class="nx">getTokenEndpoint</span><span class="p">()}</span><span class="s2">`</span><span class="p">);</span>
    <span class="c1">// Update following line by adding dpopToken parameter</span>
    <span class="kd">let</span> <span class="nx">tokenResp</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">oktaHelper</span><span class="p">.</span><span class="nx">tokenRequest</span><span class="p">(</span><span class="nx">ccToken</span><span class="p">,</span> <span class="nx">dpopToken</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">respBody</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">tokenResp</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
    <span class="c1">// New Code - Start</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">tokenResp</span><span class="p">.</span><span class="nx">status</span> <span class="o">!=</span> <span class="mi">400</span> <span class="o">||</span> <span class="p">(</span><span class="nx">respBody</span> <span class="o">&amp;&amp;</span> <span class="nx">respBody</span><span class="p">.</span><span class="nx">error</span> <span class="o">!=</span> <span class="dl">'</span><span class="s1">use_dpop_nonce</span><span class="dl">'</span><span class="p">))</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Authentication Failed</span><span class="dl">'</span><span class="p">);</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">respBody</span><span class="p">);</span>
      <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kd">let</span> <span class="nx">dpopNonce</span> <span class="o">=</span> <span class="nx">tokenResp</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">dpop-nonce</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Token call failed with nonce error \n`</span><span class="p">);</span>
    <span class="nx">dpopToken</span> <span class="o">=</span> <span class="nx">oktaHelper</span><span class="p">.</span><span class="nx">generateDpopToken</span><span class="p">(</span><span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span> <span class="nx">oktaHelper</span><span class="p">.</span><span class="nx">getTokenEndpoint</span><span class="p">(),</span> <span class="p">{</span><span class="na">nonce</span><span class="p">:</span> <span class="nx">dpopNonce</span><span class="p">});</span>
    <span class="nx">ccToken</span> <span class="o">=</span> <span class="nx">oktaHelper</span><span class="p">.</span><span class="nx">generateCcToken</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Retrying token call to </span><span class="p">${</span><span class="nx">oktaHelper</span><span class="p">.</span><span class="nx">getTokenEndpoint</span><span class="p">()}</span><span class="s2"> with DPoP nonce </span><span class="p">${</span><span class="nx">dpopNonce</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="nx">tokenResp</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">oktaHelper</span><span class="p">.</span><span class="nx">tokenRequest</span><span class="p">(</span><span class="nx">ccToken</span><span class="p">,</span> <span class="nx">dpopToken</span><span class="p">);</span>
    <span class="nx">respBody</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">tokenResp</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
    <span class="c1">// New Code - End</span>
    <span class="nx">oktaHelper</span><span class="p">.</span><span class="nx">accessToken</span> <span class="o">=</span> <span class="nx">respBody</span><span class="p">[</span><span class="dl">'</span><span class="s1">access_token</span><span class="dl">'</span><span class="p">];</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Successfully retrieved access token: </span><span class="p">${</span><span class="nx">oktaHelper</span><span class="p">.</span><span class="nx">accessToken</span><span class="p">}</span><span class="s2">\n`</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">oktaHelper</span><span class="p">.</span><span class="nx">accessToken</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Before proceeding, make sure to enable DPoP in your Okta service application. Now, test the steps by running <code class="language-plaintext highlighter-rouge">npm start</code> in the terminal. OOPS! You would have received an access token, but a call to the user‚Äôs API failed with a 400 status. We didn‚Äôt include the DPoP proof in this API call. With DPoP enabled, we must include a new DPoP proof for every call. This prevents malicious actors from reusing stolen access tokens.</p>
<p>Let‚Äôs add some code to include DPoP proof during every API call.</p>
<p>In the <code class="language-plaintext highlighter-rouge">oktaService.js</code> file, add a helper method to generate the hash of the access token or <code class="language-plaintext highlighter-rouge">ath</code> value. You‚Äôll use this value later to bind access tokens with DPoP proofs:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">oktaHelper</span> <span class="o">=</span> <span class="p">{</span>
  <span class="p">.....,</span>
  <span class="c1">// Add as the last attribute of oktaHelper object</span>
  <span class="na">generateAth</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">token</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createHash</span><span class="p">(</span><span class="dl">'</span><span class="s1">sha256</span><span class="dl">'</span><span class="p">).</span><span class="nx">update</span><span class="p">(</span><span class="nx">token</span><span class="p">).</span><span class="nx">digest</span><span class="p">(</span><span class="dl">'</span><span class="s1">base64</span><span class="dl">'</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/</span><span class="se">\/</span><span class="sr">/g</span><span class="p">,</span> <span class="dl">'</span><span class="s1">_</span><span class="dl">'</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/</span><span class="se">\+</span><span class="sr">/g</span><span class="p">,</span> <span class="dl">'</span><span class="s1">-</span><span class="dl">'</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/</span><span class="se">\=</span><span class="sr">/g</span><span class="p">,</span> <span class="dl">''</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>
<p>A valid DPoP proof JWT includes the access token hash (<code class="language-plaintext highlighter-rouge">ath</code>) value. To make this change, update <code class="language-plaintext highlighter-rouge">managementApiCall</code> method</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">managementApiCall</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">relativeUri</span><span class="p">,</span> <span class="nx">httpMethod</span><span class="p">,</span> <span class="nx">headers</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Construct Okta management API calls </span>
  <span class="kd">let</span> <span class="nx">uri</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">oktaHelper</span><span class="p">.</span><span class="nx">oktaDomain</span><span class="p">}${</span><span class="nx">relativeUri</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
  <span class="c1">// New Code - Start</span>
  <span class="kd">let</span> <span class="nx">ath</span> <span class="o">=</span> <span class="nx">oktaHelper</span><span class="p">.</span><span class="nx">generateAth</span><span class="p">(</span><span class="nx">oktaHelper</span><span class="p">.</span><span class="nx">accessToken</span><span class="p">);</span>
  <span class="kd">let</span> <span class="nx">dpopToken</span> <span class="o">=</span> <span class="nx">oktaHelper</span><span class="p">.</span><span class="nx">generateDpopToken</span><span class="p">(</span><span class="nx">httpMethod</span><span class="p">,</span> <span class="nx">uri</span><span class="p">,</span> <span class="p">{</span><span class="nx">ath</span><span class="p">});</span>
  <span class="c1">// New Code - End</span>
  <span class="c1">// Update reqHeaders object</span>
  <span class="kd">let</span> <span class="nx">reqHeaders</span> <span class="o">=</span> <span class="p">{</span>
    <span class="dl">'</span><span class="s1">Accept</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span><span class="p">,</span>
    <span class="dl">'</span><span class="s1">Authorization</span><span class="dl">'</span><span class="p">:</span> <span class="s2">`DPoP </span><span class="p">${</span><span class="nx">oktaHelper</span><span class="p">.</span><span class="nx">accessToken</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span>
    <span class="dl">'</span><span class="s1">DPoP</span><span class="dl">'</span><span class="p">:</span> <span class="nx">dpopToken</span><span class="p">,</span>
    <span class="p">...</span><span class="nx">headers</span>
  <span class="p">};</span>
  <span class="k">return</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">uri</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">method</span><span class="p">:</span> <span class="nx">httpMethod</span><span class="p">,</span>
    <span class="na">headers</span><span class="p">:</span> <span class="nx">reqHeaders</span><span class="p">,</span>
    <span class="nx">body</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Run <code class="language-plaintext highlighter-rouge">npm start</code>. Voila! You see a list of users!</p>
<p>We successfully authenticated to Okta with a service app demonstrating DPoP and are using this access token and DPoP proof to access Okta Admin Management API endpoints.</p>
<h2 id="experiment-with-dpop-and-api-scopes-for-okta-api-and-custom-resource-server-calls">Experiment with DPoP and API scopes for Okta API and custom resource server calls</h2>
<p>You can download the completed project from the <a href="https://github.com/oktadev/okta-node-dpop-example">GitHub repository</a>.</p>
<p>Try modifying the project using different Okta API scopes and experimenting with other endpoints. Ensure you give permissions to your service app by assigning appropriate Admin roles. To improve security, you can implement similar protection to your custom resource server endpoints using a custom authorization server and custom set of scopes.</p>
<h2 id="learn-more-about-okta-management-api-dpop-and-oauth-20">Learn more about Okta Management API, DPoP, and OAuth 2.0</h2>
<p>In this post, you accessed Okta management API using a node app and were able to make it more secure by adding DPoP support. I hope you enjoyed it! If you want to learn more about the ways you can incorporate authentication and authorization security in your apps, you might want to check out these resources:</p>
<ul>
  <li><a href="/blog/2024/09/05/dpop-oauth">Elevate Access Token Security by Demonstrating Proof-of-Possession</a></li>
  <li><a href="https://developer.okta.com/docs/reference/">Okta Management API reference</a></li>
  <li><a href="https://developer.okta.com/docs/concepts/oauth-openid/">OAuth 2.0 and OpenID Connect overview</a></li>
  <li><a href="https://developer.okta.com/docs/guides/implement-oauth-for-okta-serviceapp/main/">Implement OAuth for Okta</a></li>
  <li><a href="https://developer.okta.com/docs/guides/dpop/-/main/">Configure OAuth 2.0 Demonstrating Proof-of-Possession</a></li>
</ul>
<p>Remember to follow us on <a href="https://twitter.com/oktadev">Twitter</a> and subscribe to our <a href="https://www.youtube.com/c/OktaDev/">YouTube channel</a> for more exciting content. We also want to hear from you about topics you want to see and questions you may have. Leave us a comment below!</p>
Wed, 23 Oct 2024 00:00:00 -0500
https://developer.okta.com/blog/2024/10/23/dpop-oauth-node
https://developer.okta.com/blog/2024/10/23/dpop-oauth-node
How to Create a Secure CI/CD Pipeline Using Okta Terraform
<p>Embarking on a DevOps journey can be exciting and daunting, especially for beginners. The landscape is vast, and the learning curve can feel steep. One of the most common challenges is setting up and managing a robust Continuous Integration/Continuous Deployment (CI/CD) pipeline that ensures seamless integration and delivery of code changes. This guide aims to simplify that process by walking you through setting up a CI/CD pipeline for Okta using Terraform, AWS, and GitHub Actions.</p>
<h2 id="overcoming-devops-challenges-securely">Overcoming DevOps challenges securely</h2>
<p>Getting started with DevOps often presents a series of challenges:</p>
<ol>
  <li><strong>Running Locally</strong>: Setting up Terraform locally involves dealing with packages, dependencies, and managing the state file, which can be cumbersome and error-prone.</li>
  <li><strong>Collaboration</strong>: Ensuring team members can collaborate effectively requires a consistent and reproducible environment.</li>
</ol>
<p>Making a setup production-ready introduces further complexities:</p>
<ol>
  <li><strong>State File Storage</strong>: Knowing where and how to store the Terraform state file securely.</li>
  <li><strong>Secrets Management</strong>: Safely storing and managing sensitive information like API keys and passwords.</li>
  <li><strong>Automation</strong>: Automating the deployment process to ensure reliability and efficiency.</li>
</ol>
<p>In this post, we‚Äôll use Okta, Terraform, AWS, GitHub, and GitHub actions to create a secure CI/CD pipeline.</p>
<p><strong class="hide">Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#overcoming-devops-challenges-securely" id="markdown-toc-overcoming-devops-challenges-securely">Overcoming DevOps challenges securely</a></li>
  <li><a href="#cicd-pipeline-architecture-using-terraform-aws-okta-and-github" id="markdown-toc-cicd-pipeline-architecture-using-terraform-aws-okta-and-github">CI/CD pipeline architecture using Terraform, AWS, Okta, and GitHub</a></li>
  <li><a href="#cicd-workflow-overview" id="markdown-toc-cicd-workflow-overview">CI/CD workflow overview</a></li>
  <li><a href="#store-terraform-files-in-source-control" id="markdown-toc-store-terraform-files-in-source-control">Store Terraform files in source control</a></li>
  <li><a href="#connect-to-okta-securely-using-oauth-20" id="markdown-toc-connect-to-okta-securely-using-oauth-20">Connect to Okta securely using OAuth 2.0</a></li>
  <li><a href="#leveraging-aws-for-terraform-backend-and-secrets-management" id="markdown-toc-leveraging-aws-for-terraform-backend-and-secrets-management">Leveraging AWS for Terraform Backend and Secrets Management</a>    <ul>
      <li><a href="#store-terraform-backend-components-in-aws" id="markdown-toc-store-terraform-backend-components-in-aws">Store Terraform backend components in AWS</a></li>
      <li><a href="#manage-secrets-securely" id="markdown-toc-manage-secrets-securely">Manage secrets securely</a></li>
      <li><a href="#set-up-the-iam-policy-for-the-cicd-pipeline" id="markdown-toc-set-up-the-iam-policy-for-the-cicd-pipeline">Set up the IAM policy for the CI/CD pipeline</a></li>
      <li><a href="#configure-an-openid-connect-provider-in-github" id="markdown-toc-configure-an-openid-connect-provider-in-github">Configure an OpenID Connect Provider in GitHub</a></li>
      <li><a href="#create-iam-roles-for-the-cicd-pipeline" id="markdown-toc-create-iam-roles-for-the-cicd-pipeline">Create IAM roles for the CI/CD pipeline</a></li>
    </ul>
  </li>
  <li><a href="#use-github-actions-to-trigger-terraform-commands" id="markdown-toc-use-github-actions-to-trigger-terraform-commands">Use GitHub Actions to trigger Terraform commands</a>    <ul>
      <li><a href="#leverage-github-actions-for-the-cicd-workflow" id="markdown-toc-leverage-github-actions-for-the-cicd-workflow">Leverage GitHub Actions for the CI/CD workflow</a></li>
      <li><a href="#organize-the-cicd-and-terraform-code-files-for-maintainability" id="markdown-toc-organize-the-cicd-and-terraform-code-files-for-maintainability">Organize the CI/CD and Terraform code files for maintainability</a></li>
    </ul>
  </li>
  <li><a href="#build-the-cicd-pipeline-using-terraform-and-okta" id="markdown-toc-build-the-cicd-pipeline-using-terraform-and-okta">Build the CI/CD pipeline using Terraform and Okta</a>    <ul>
      <li><a href="#set-up-source-control-branches-for-terraform-code-files" id="markdown-toc-set-up-source-control-branches-for-terraform-code-files">Set up source control branches for Terraform code files</a></li>
      <li><a href="#finalize-terraform-configuration" id="markdown-toc-finalize-terraform-configuration">Finalize Terraform configuration</a></li>
      <li><a href="#connect-terraform-code-to-okta-resources" id="markdown-toc-connect-terraform-code-to-okta-resources">Connect Terraform code to Okta resources</a></li>
      <li><a href="#github-actions-triggers-terraform-dev-build" id="markdown-toc-github-actions-triggers-terraform-dev-build">GitHub Actions triggers Terraform dev build</a></li>
      <li><a href="#github-actions-trigger-terraform-prod-plan" id="markdown-toc-github-actions-trigger-terraform-prod-plan">GitHub Actions trigger Terraform prod plan</a></li>
      <li><a href="#github-actions-trigger-terraform-prod-build" id="markdown-toc-github-actions-trigger-terraform-prod-build">GitHub Actions trigger Terraform prod build</a></li>
    </ul>
  </li>
  <li><a href="#learn-more-about-okta-terraform-cicd-patterns-and-oauth-20" id="markdown-toc-learn-more-about-okta-terraform-cicd-patterns-and-oauth-20">Learn more about Okta, Terraform, CI/CD patterns, and OAuth 2.0</a></li>
</ul>
<p>By the end of this post, you‚Äôll have a solid understanding of how to set up a CI/CD pipeline tailored for Okta and the knowledge to start implementing infrastructure as code with Terraform.</p>
<p>Let‚Äôs dive in and take the first step towards mastering DevOps with a practical, hands-on approach!</p>
<p><strong>Prerequisites</strong></p>
<p>You‚Äôll need the following tools installed on your local machine. Follow the installation instructions through the provided links.</p>
<ul>
  <li>IDE with a Terraform plugin, such as <a href="https://code.visualstudio.com/">Visual Studio Code</a> or <a href="https://www.jetbrains.com/idea/">IntelliJ IDEA</a>
    <blockquote>
      <p>Choosing the proper Integrated Development Environment (IDE) with a Terraform plugin is crucial for an efficient and error-free workflow. Some essential features to look for in your IDE:</p>
      <ol>
        <li><strong>Variable Declaration Warnings</strong>: If your Terraform module requires certain variables, the IDE will alert you when any required variables are not declared.</li>
        <li><strong>Resource Declaration Assistance</strong>: When you declare a resource, the IDE will warn you if any required attributes are missing and suggest attributes to add.</li>
        <li><strong>Resource and Attribute Autocompletion</strong>: The IDE will autocomplete resource names and attributes when referencing other resources, saving time and reducing errors.</li>
      </ol>
    </blockquote>
  </li>
  <li><a href="https://git-scm.com/">Git</a></li>
  <li>Terminal window</li>
</ul>
<p>You‚Äôll need the following accounts:</p>
<ul>
  <li><a href="https://developer.okta.com/signup/">Okta Workforce Identity Cloud Developer Edition account</a></li>
  <li><a href="https://github.com/">GitHub account</a> and a <a href="https://docs.github.com/en/organizations/collaborating-with-groups-in-organizations/creating-a-new-organization-from-scratch">GitHub organization account</a> (You can create a free GitHub organization if you don‚Äôt have access to one)</li>
  <li>A free <a href="https://signin.aws.amazon.com/signup?request_type=register">AWS account</a></li>
</ul>
<h2 id="cicd-pipeline-architecture-using-terraform-aws-okta-and-github">CI/CD pipeline architecture using Terraform, AWS, Okta, and GitHub</h2>
<p>It is essential to understand the key components and their roles in the CI/CD process. This integration of GitHub, Terraform, AWS, and Okta allows for secure and efficient infrastructure management and deployment. The following overview details each component and its function.</p>
<p><img src="/assets-jekyll/blog/terraform-ci-cd/architecture-overview-b47c2b972b6fbb7428f620b5ffe855f07e02c41196b5a1074a766a7571f3c199.jpg" alt="The developer creates code that interacts with GitHub which triggers workflows in GitHub Actions. A GitHub action starts GitHub OIDC IdP interactions with AWS to create roles and temporary credentials. GitHub Actions then triggers Terraform to use AWS resources to capture state and secrets and then calls Okta to create resources." width="800" /></p>
<p><strong>User</strong></p>
<ul>
  <li><strong>Develop Code</strong>: Develops Terraform code on their local machine using a preferred IDE. Uses Git to push code to the GitHub repository.</li>
</ul>
<p><strong>GitHub Repository</strong></p>
<ul>
  <li><strong>Code Storage</strong>: Stores the Terraform configuration code.</li>
  <li><strong>Triggers Workflow</strong>: GitHub Actions checks out code that automates builds using Terraform based on events within the GitHub repository (e.g., push to branches, pull requests, etc.).</li>
</ul>
<p><strong>GitHub Actions</strong></p>
<ul>
  <li><strong>Workflows</strong>: Workflows are automatically triggered by GitHub repository events and execute the necessary commands to integrate with AWS and Terraform.</li>
  <li><strong>AWS</strong>:
    <ul>
      <li><strong>Assume Role</strong>: Integrates with AWS IAM STS via GitHub OIDC IdP to authenticate and assume roles with web identity.</li>
      <li><strong>Temporary Credentials</strong>: Utilizes temporary credentials returned from AWS IAM STS for Terraform backend operations.</li>
    </ul>
  </li>
  <li><strong>Terraform</strong>: Runs Terraform commands to manage infrastructure.</li>
</ul>
<p><strong>Terraform</strong></p>
<ul>
  <li><strong>State Management</strong>:
    <ul>
      <li><strong>S3</strong>: Utilizes S3 for storing Terraform state files.</li>
      <li><strong>DynamoDB</strong>: Uses DynamoDB for state locking to ensure consistency and prevent concurrent operations.</li>
      <li><strong>Secrets Management</strong>: Retrieves Okta OAuth2 client credentials private key from AWS Secrets Manager for authentication and authorization to Okta management APIs.</li>
    </ul>
  </li>
  <li><strong>Okta</strong>:
    <ul>
      <li><strong>Resource Management</strong>: Leverages Okta APIs via the Terraform Okta provider to manage resources.</li>
    </ul>
  </li>
</ul>
<h2 id="cicd-workflow-overview">CI/CD workflow overview</h2>
<p>At a high level, this is what we aim to build out through this article. We‚Äôll set up a CI/CD pipeline that automates infrastructure deployment using GitHub, Terraform, AWS, and Okta. Here‚Äôs a simplified overview of the workflow:</p>
<p><img src="/assets-jekyll/blog/terraform-ci-cd/workflow-5578c19a700cffca475ca77073c5fb24196179d786c86a2927782a7875c93243.jpg" width="800" alt="blog/terraform-ci-cd/workflow.jpg" /></p>
<ol>
  <li><strong>Branch Creation</strong>: Developers create and work on a <code class="language-plaintext highlighter-rouge">develop</code> branch.</li>
  <li><strong>Push to Develop</strong>: Code changes are committed locally and pushed to the remote <code class="language-plaintext highlighter-rouge">develop</code> branch.</li>
  <li><strong>Dev Build</strong>: GitHub Actions run Terraform commands to deploy to the development environment. The push to develop automatically triggers this.</li>
  <li><strong>Pull Request to Main</strong>: A pull request is made from <code class="language-plaintext highlighter-rouge">develop</code> to <code class="language-plaintext highlighter-rouge">main</code> for code review. Any GitHub Action workflow executions are included in the pull request for review.</li>
  <li><strong>Prod Plan</strong>: GitHub Actions preview changes for the production environment. This is triggered automatically by the pull request to main, and it lets pull request reviewers validate potential changes before modifying the production environment.</li>
  <li><strong>Merge to Main</strong>: The pull request is approved and merged into the <code class="language-plaintext highlighter-rouge">main</code> branch.</li>
  <li><strong>Prod Build</strong>: GitHub Actions runs Terraform commands to deploy to the production environment. The merge to <code class="language-plaintext highlighter-rouge">main</code> automatically triggers this.</li>
</ol>
<h2 id="store-terraform-files-in-source-control">Store Terraform files in source control</h2>
<p>We‚Äôll use GitHub as our code repository and GitHub Actions for our CI/CD workflows, so you‚Äôll need a GitHub account. If you don‚Äôt have one, create one at <a href="https://github.com/">GitHub</a>.</p>
<p>You will also need a GitHub Organization. If you are an enterprise user, you likely already have one. If not, or if you‚Äôre experimenting, you can create one for free by following the <a href="https://github.com/settings/organizations">GitHub Organizations</a> instructions to start creating an Organization.</p>
<p>You‚Äôll create a new repository within your GitHub Organization and then connect it to your local development environment:</p>
<ol>
  <li><strong>Create a new repository</strong>: We created a templated repository for you to use for this guide. Follow the <a href="https://docs.github.com/en/repositories/creating-and-managing-repositories/creating-a-repository-from-a-template">Creating a repository from a template</a> instruction from GitHub and use this <a href="https://github.com/oktadev/okta-terraform-devops-template-example">sample template</a>.  Select your GitHub Organization as the owner and name the repository using a structure such as <code class="language-plaintext highlighter-rouge">{okta-domain-name}-okta-terraform</code> (e.g., <code class="language-plaintext highlighter-rouge">atko-okta-terraform</code>). Ensure you set the repository to <strong>Private</strong>. This setting is crucial as the repository will run GitHub Actions workflows and have information related to your environment (e.g., AWS resource names).</li>
  <li><strong>Clone the Repository</strong>: Once you create your repository, copy the clone link and run the following commands in the command line. Replace the variables with your GitHub username, GitHub organization, and repository name:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://<span class="o">{</span>your_github_username<span class="o">}</span>@github.com/<span class="o">{</span>your-github-organization<span class="o">}</span>/<span class="o">{</span>your-repository-name<span class="o">}</span>.git
<span class="nb">cd</span> <span class="o">{</span>your-repository-name<span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ol>
<h2 id="connect-to-okta-securely-using-oauth-20">Connect to Okta securely using OAuth 2.0</h2>
<p>We will use the OAuth 2.0 client credentials flow to access Okta APIs. OAuth 2.0 is the most secure method for integrating with Okta APIs, as we can tightly bound authorizations using scopes, and access tokens are short-lived compared to the long-lived <code class="language-plaintext highlighter-rouge">SSWS</code> API keys. Furthermore, Okta‚Äôs Terraform provider supports <a href="/blog/2024/09/05/dpop-oauth">OAuth 2.0 Demonstrating Proof-of-Possession (DPoP)</a>, which is an additional security mechanism to bind access tokens to a particular client through cryptography, thereby reducing the risk of token replay by a malicious actor.</p>
<p>The Okta OAuth client requires ‚Äòscopes‚Äô to interact with the management API. For this guide, we will interact with the Groups resource in Terraform and corresponding APIs. To understand the corresponding scopes related to a Terraform resource and underlying Management APIs, refer to the <a href="https://developer.okta.com/docs/api/openapi/okta-management/management/tag/Group/">Okta API documentation</a>.</p>
<p>Finally, the OAuth client requires an Administrator Role to make administrative changes. We will assign the Organization Administrator role as this contains sufficient permissions for the resources we manage within this build. If you intend to use Terraform to manage your environment ongoing, a  Super Administrator may be required (especially for managing resources like Admin Roles). The effective permissions are a combination of the scopes permitted for the client and the Administrator Role - so even though we provide the client ‚ÄòOrganization Administrator,‚Äô if we only give access to ‚Äògroups‚Äô related scopes, all the client can do via the API is manage groups!</p>
<p>Follow these steps to set up an API Services application in Okta. Navigate to the <a href="https://developer.okta.com/login/">Okta Admin Console</a> and follow the steps to create the API services application:</p>
<ol>
  <li>Navigate to <strong>Applications</strong> &gt; <strong>Applications</strong> and press the button to <strong>Create App Integration</strong></li>
  <li>Select <strong>API Services</strong> and press <strong>Next</strong></li>
  <li>Name your application (e.g., Terraform)</li>
  <li>Press <strong>Save</strong></li>
</ol>
<p>In the <strong>General Settings</strong> tab, find the <strong>Client Credentials</strong> section and press <strong>Edit</strong> to make the following changes:</p>
<ol>
  <li>Change the <strong>Client authentication</strong> method to <strong>Public key / Private key</strong>.</li>
  <li>In the <strong>Public Keys</strong> section, click <strong>Add key</strong> and then <strong>Generate new key</strong>.</li>
  <li>Select the <strong>PEM</strong> tab and copy the contents to a file you‚Äôll use later.</li>
  <li>Select <strong>Done</strong> and <strong>Save</strong></li>
</ol>
<p>Navigate to <strong>Okta API Scopes</strong> tab and make the changes:</p>
<ol>
  <li>Find <code class="language-plaintext highlighter-rouge">okta.groups.manage</code> and select <strong>Grant</strong></li>
</ol>
<p>Navigate to the <strong>Admin roles</strong> tab and press <strong>Edit assignments</strong>. Then apply the following changes:</p>
<ol>
  <li>In the <strong>Role</strong> drop-down, select ‚ÄòOrganization Administrator‚Äô, or your preferred Admin Role</li>
  <li>Select <strong>Save Changes</strong> to finish assigning the role</li>
</ol>
<p>Repeat these steps to create an API Service Okta application and configure it for any additional environments you manage.</p>
<blockquote>
  <p>‚ö†Ô∏è <strong>Important</strong></p>
  <p>Do not save the private key locally. In the next steps, we will securely onboard it to secrets management.</p>
</blockquote>
<h2 id="leveraging-aws-for-terraform-backend-and-secrets-management">Leveraging AWS for Terraform Backend and Secrets Management</h2>
<p>We will utilize AWS for both the Terraform backend and Secrets Management. The Terraform backend will store state files, which track the status of your Okta environment based on previous builds. We will use the GitHub OIDC integration with AWS for Terraform authentication. This allows GitHub to authenticate with AWS using OpenID Connect (OIDC) and assume the necessary role via web identity to interact with required services. This approach eliminates the need for long-lived or persistent secrets (such as AWS access keys and secrets), ensuring a more secure setup.</p>
<h3 id="store-terraform-backend-components-in-aws">Store Terraform backend components in AWS</h3>
<p>First, let‚Äôs create the necessary components for the Terraform backend.</p>
<p><strong>Create an S3 Bucket</strong></p>
<p>Follow the <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-bucket-overview.html">Creating a bucket</a> instructions from AWS to create a bucket. Name the bucket using a structure such as <code class="language-plaintext highlighter-rouge">{okta-domain-name}-okta-terraform-state</code>. By default, <strong>Block all public access</strong> is enabled, which ensures that your bucket contents are private, which is an integral control given that the bucket will contain information about your Okta configuration. I highly recommend enabling <strong>Bucket Versioning</strong> to version your state files. This is a valuable feature should you need to roll back to previous versions of the state. After you have created the bucket, follow the <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/view-bucket-properties.html">Viewing the properties for an S3 bucket</a> instructions to navigate to the properties of the bucket and capture the ARN. The ARN will be used later to define the AWS IAM Role Policy. Lastly, we will use folders to organize your different environments‚Äô state files. Follow the <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-folders.html">Organizing objects in the Amazon S3 console by using folders</a> instructions to create a folder for each environment you manage (e.g. dev and prod).</p>
<p><strong>Create a DynamoDB Table for State Locking</strong></p>
<p>Follow the <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/getting-started-step-1.html">Create a table in DynamoDB</a> instructions to create a DynamoDB table. Name the table using a structure such as <code class="language-plaintext highlighter-rouge">{okta-domain-name}-okta-terraform-{environment}</code> (e.g. <code class="language-plaintext highlighter-rouge">atko-okta-terraform-dev</code>). Set the partition key to ‚ÄòLockID‚Äô and leave other configuration defaults. Note the table name, we will be using it later in the AWS IAM Role Policy definition. Repeat for any other environments you manage.</p>
<p>For more information on the AWS S3 Terraform backend, please refer to <a href="https://developer.hashicorp.com/terraform/language/settings/backends/s3">Terraform S3 Backend Documentation</a>.</p>
<h3 id="manage-secrets-securely">Manage secrets securely</h3>
<p>Next, we will set up AWS Secrets Manager to securely store the private key for authentication and authorization to Okta management APIs.</p>
<p>Follow the <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/create_secret.html">Create an AWS Secrets Manager secret</a> instructions to store the OAuth 2.0 private key(s). When configuring the secret, note this is of the secret type <strong>Other type of secret</strong>, and <strong>Plaintext</strong>. Ensure you name the secret something meaningful, as this will be referenced in your Terraform configurations, as well as AWS IAM Role Policy definition - follow a structure such as <code class="language-plaintext highlighter-rouge">{environment}/okta-terraform-key</code> (e.g., <code class="language-plaintext highlighter-rouge">dev/okta-terraform-key</code>). Since it‚Äôs a private key, keep any rotation-related configurations as default options. Once the secret has been created, copy the ARN for later use within the AWS IAM Role Policy definition. Repeat for any additional environments you manage.</p>
<h3 id="set-up-the-iam-policy-for-the-cicd-pipeline">Set up the IAM policy for the CI/CD pipeline</h3>
<p>Next, we‚Äôll create the IAM Policy definition. This policy will be used by the role that GitHub will assume via OpenID Connect (OIDC).</p>
<p>First, we will prepare the IAM policy JSON file. 
Use the following template and make the necessary replacements using the ARNs you‚Äôve captured from the previous steps.</p>
<ul>
  <li>Replace <code class="language-plaintext highlighter-rouge">&lt;S3-ARN&gt;</code> with the ARN of your S3 bucket. This grants permission to list the bucket. You can find it under the <strong>Properties</strong> tab of the S3 Bucket. Example: <code class="language-plaintext highlighter-rouge">arn:aws:s3:::akto-okta-terraform</code></li>
  <li>Replace <code class="language-plaintext highlighter-rouge">&lt;S3-ARN&gt;/*</code> with the ARN of your S3 bucket and any folder structures for respective environments. This grants permission to get and update objects in the relevant path. Alternatively, you can use a wildcard (<code class="language-plaintext highlighter-rouge">*</code>) for the entire bucket. Example: <code class="language-plaintext highlighter-rouge">arn:aws:s3:::akto-okta-terraform/dev/*</code></li>
  <li>Replace <code class="language-plaintext highlighter-rouge">&lt;AWS-Region&gt;</code>,  <code class="language-plaintext highlighter-rouge">&lt;Account-Number&gt;</code>, and <code class="language-plaintext highlighter-rouge">&lt;DynamoDB-Table-Name&gt;</code> with the AWS Region, AWS Account Number (found in the management console toolbar) and DynamoDB Table Name respectively. This grants permission to add and remove rows in the table for the Terraform state file locking process. Include any additional tables for each environment.
  <code class="language-plaintext highlighter-rouge">Example: arn:aws:dynamodb:ap-southeast-2:99123456789:table/akto-okta-terraform-dev</code></li>
  <li>Replace <code class="language-plaintext highlighter-rouge">&lt;SecretsManager-ARN&gt;</code> with the ARN of your Secrets Manager secret. This grants permission to retrieve the secret value. Include any additional ARNs for each environment.
  Example: <code class="language-plaintext highlighter-rouge">arn:aws:secretsmanager:ap-southeast-2:99123456789:secret:dev/akto_okta_terraform_key-QuqiGR</code></li>
</ul>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2012-10-17"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Statement"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Allow"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"Action"</span><span class="p">:</span><span class="w"> </span><span class="s2">"s3:ListBucket"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"&lt;S3-ARN&gt;"</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Allow"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"Action"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="s2">"s3:GetObject"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"s3:PutObject"</span><span class="w">
            </span><span class="p">],</span><span class="w">
            </span><span class="nl">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="s2">"&lt;S3-ARN&gt;/*"</span><span class="w">
            </span><span class="p">]</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Allow"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"Action"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="s2">"dynamodb:DescribeTable"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"dynamodb:GetItem"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"dynamodb:PutItem"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"dynamodb:DeleteItem"</span><span class="w">
            </span><span class="p">],</span><span class="w">
            </span><span class="nl">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="s2">"arn:aws:dynamodb:&lt;AWS-Region&gt;:&lt;Account-Number&gt;:table/&lt;DynamoDB-Table-Name&gt;"</span><span class="w">
            </span><span class="p">]</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Allow"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"Action"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="s2">"secretsmanager:ListSecrets"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"secretsmanager:GetSecretValue"</span><span class="w">
            </span><span class="p">],</span><span class="w">
            </span><span class="nl">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="s2">"&lt;SecretsManager-ARN&gt;"</span><span class="w">
            </span><span class="p">]</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>Follow the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_create-console.html">Create IAM policies</a> documentation for instructions on creating an IAM Policy. When creating the policy document, use the JSON editor and input the JSON from the previous step. Name the policy something meaningful (e.g. ‚ÄòOkta_Terraform_Backend‚Äô).</p>
<p>By following these steps, you will have created an IAM policy that provides the necessary permissions for Terraform to interact securely with AWS services.</p>
<h3 id="configure-an-openid-connect-provider-in-github">Configure an OpenID Connect Provider in GitHub</h3>
<p>Next, we‚Äôll configure the OIDC Identity Provider for GitHub. Follow the AWS instructions at <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_oidc.html#manage-oidc-provider-console">Create an OpenID Connect identity provider in IAM</a>.</p>
<ul>
  <li>For the <strong>Provider URL</strong>, use <code class="language-plaintext highlighter-rouge">https://token.actions.githubusercontent.com</code></li>
  <li>For the <strong>Audience</strong>, use <code class="language-plaintext highlighter-rouge">sts.amazonaws.com</code></li>
</ul>
<p>For more information on integrating GitHub with AWS using OIDC, refer to the <a href="https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services">GitHub and AWS integration documentation</a>.</p>
<h3 id="create-iam-roles-for-the-cicd-pipeline">Create IAM roles for the CI/CD pipeline</h3>
<p>Finally, we‚Äôll create an IAM Role for the GitHub OIDC Identity Provider to assume. This role will link the OIDC Identity Provider via the trusted entity and the policy via permissions.</p>
<p>Follow the instructions for <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-idp_oidc.html#idp_oidc_Create">Creating a role for OIDC</a> from AWS. 
When configuring the Trusted Entity, choose <strong>Web Identity</strong>, and use the following values for the configurations:</p>
<ul>
  <li><strong>Identity provider</strong>: <code class="language-plaintext highlighter-rouge">token.actions.githubusercontent.com</code></li>
  <li><strong>Audience</strong>: <code class="language-plaintext highlighter-rouge">sts.amazonaws.com</code></li>
  <li><strong>GitHub organization</strong>: <code class="language-plaintext highlighter-rouge">{your_github_organization}</code> (the unique identifier for your GitHub Organization)</li>
  <li><strong>GitHub repository</strong>: <code class="language-plaintext highlighter-rouge">{your_github_repository}</code> (the name of your GitHub repository)</li>
</ul>
<p>For permissions, choose the IAM Policy (‚ÄòOkta_Terraform_Backend‚Äô, or your name of choosing) you created earlier. Name the role something meaningful (e.g. ‚ÄòGitHub_Okta_Terraform_Backend‚Äô). Once the role has been created, copy the Role ARN. This is the only variable we need to pass to our pipeline to initialize the backend and retrieve the secret to authenticate and authorize Okta APIs ‚Äî and it‚Äôs not even a secret!</p>
<p>By following these steps, you will have created an IAM Role that GitHub can assume via OIDC, enabling secure interactions with AWS and Okta.</p>
<h2 id="use-github-actions-to-trigger-terraform-commands">Use GitHub Actions to trigger Terraform commands</h2>
<p>GitHub Actions allows us to run our build and deployment activities using Terraform commands executed in a temporary virtual machine.</p>
<p>First, we must store the Role ARN and other environment variables in GitHub. To create and store variables for the GitHub repository, follow the <a href="https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/store-information-in-variables#creating-configuration-variables-for-a-repository">Creating configuration variables for a repository</a> instructions.</p>
<ol>
  <li><strong>Store the Role ARN</strong>: Create a variable named AWS_ROLE_ARN and use the Role ARN for the value (e.g. <code class="language-plaintext highlighter-rouge">arn:aws:iam::&lt;Account-Number&gt;:role/&lt;Role-Name&gt;</code>).</li>
  <li><strong>Store the Region</strong>: Create a variable named AWS_REGION and use the Region in which the AWS resources were created (e.g. <code class="language-plaintext highlighter-rouge">ap-southeast-2</code>). Refer to the following documentation for more details on Region names: <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">AWS Regions Documentation</a></li>
</ol>
<blockquote>
  <p>Ensure you do this at a ‚ÄòRepository‚Äô level and not at an ‚ÄòOrganization‚Äô level, or the GitHub Actions workflows will not be able to read the variables</p>
</blockquote>
<h3 id="leverage-github-actions-for-the-cicd-workflow">Leverage GitHub Actions for the CI/CD workflow</h3>
<p>We will use multiple pre-built GitHub Actions to authenticate to AWS and run our Terraform commands. No action is required from you to configure these workflows. At a high level, the configured GitHub Actions workflows will perform the following:</p>
<ol>
  <li><strong>GitHub Actions Runner</strong>: This action checks out your repository onto the runner, allowing you to run Terraform commands against your code.</li>
  <li><strong>AWS Configure AWS Credentials</strong>: This action establishes an AWS session using the GitHub OIDC Identity Provider (IdP) and the Assume Role with Web Identity capability. There is no need to manage any secrets or custom scripts, as this action will handle session establishment.</li>
  <li><strong>Terraform CLI</strong>: This action runs the Terraform commands.</li>
</ol>
<p>For more information and to examine the code, see the <code class="language-plaintext highlighter-rouge">github/workflows</code> folder within the repository.</p>
<h3 id="organize-the-cicd-and-terraform-code-files-for-maintainability">Organize the CI/CD and Terraform code files for maintainability</h3>
<p>The high-level structure of the repository looks like this:</p>
<pre><code class="language-markup">github/
‚îú‚îÄ workflows/
‚îÇ  ‚îú‚îÄ push-main.yml
‚îÇ  ‚îú‚îÄ push-develop.yml
‚îÇ  ‚îú‚îÄ pr-main.yml
terraform/
‚îú‚îÄ modules/
‚îÇ  ‚îú‚îÄ {module}/
‚îÇ  ‚îÇ  ‚îú‚îÄ {resource}.tf
‚îÇ  ‚îÇ  ‚îú‚îÄ variables.tf
‚îú‚îÄ main.tf
‚îú‚îÄ variables.tf
‚îú‚îÄ backend-dev.conf
‚îú‚îÄ backend-prod.conf
‚îú‚îÄ vars-dev.tfvars
‚îú‚îÄ vars-prod.tfvars
</code></pre>
<h4 id="review-the-github-workflows-directory">Review the GitHub Workflows directory</h4>
<ul>
  <li><strong>github/workflows/</strong>: This directory contains the GitHub Actions workflow files that define the CI/CD pipeline.
    <ul>
      <li><strong>push-main.yml</strong>: Workflow triggered by a push to the main branch.</li>
      <li><strong>push-develop.yml</strong>: Workflow triggered by a push to the develop branch.</li>
      <li><strong>pr-main.yml</strong>: Workflow triggered by a pull request to the main branch.</li>
    </ul>
  </li>
</ul>
<h4 id="review-the-terraform-configuration-files">Review the Terraform configuration files</h4>
<ul>
  <li><strong>terraform/</strong>: The root directory for all Terraform configuration files.
    <ul>
      <li><strong>modules/</strong>: This directory contains reusable Terraform modules.
        <ul>
          <li><strong>{module}/</strong>: Each module has its own directory.
            <ul>
              <li><strong>{resource}.tf</strong>: The Terraform configuration file for specific resources within the module.</li>
              <li><strong>variables.tf</strong>: The child module input variables definition file</li>
            </ul>
          </li>
        </ul>
      </li>
      <li><strong>main.tf</strong>: The main Terraform configuration file where all providers, modules, and variables are configured.</li>
      <li><strong>variables.tf</strong>: The parent module input variables definition file.</li>
      <li><strong>backend-dev.conf</strong>: Configuration for the backend components for the development environment. This configuration must be passed in via CLI since named variables cannot be used directly in the backend block.</li>
      <li><strong>backend-prod.conf</strong>: This is the configuration for the backend components in the production environment, similar to the development configuration.</li>
      <li><strong>vars-dev.tfvars</strong>: Input variable values specific to the development environment.</li>
      <li><strong>vars-prod.tfvars</strong>: Input variable values specific to the production environment.</li>
    </ul>
  </li>
</ul>
<h2 id="build-the-cicd-pipeline-using-terraform-and-okta">Build the CI/CD pipeline using Terraform and Okta</h2>
<p>Now that we have everything set up, let‚Äôs actually build something!</p>
<p>First, we will need to update a few files with some of the necessary configurations relevant to your environment. Then we will create a new group in your Okta environment, using variables to declare the group name.</p>
<h3 id="set-up-source-control-branches-for-terraform-code-files">Set up source control branches for Terraform code files</h3>
<p>Ensure your local repository is up-to-date with the remote main branch.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout main
git pull origin main
</code></pre></div></div>
<p>Create and switch to the branch named develop.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout <span class="nt">-b</span> develop
</code></pre></div></div>
<h3 id="finalize-terraform-configuration">Finalize Terraform configuration</h3>
<p>Now that we have checked out our code let‚Äôs finalize the configurations required for Terraform to interact with our backend, retrieve the necessary secrets, and interact with the Okta Management APIs. Open the repository in your preferred IDE to edit some files.</p>
<h4 id="backend-configuration-files">Backend configuration files</h4>
<p>The Terraform backend configuration is stored within the <code class="language-plaintext highlighter-rouge">backend-*.conf</code> files and contain configurations relevant to your environments. Within these files, you will find placeholders for the following:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">bucket</code> - the name of your bucket (not the ARN!)</li>
  <li><code class="language-plaintext highlighter-rouge">key</code> - the path to your Terraform state file (i.e. the folder and resultant file name, which defaults to <code class="language-plaintext highlighter-rouge">terraform.tfstate</code>)</li>
  <li><code class="language-plaintext highlighter-rouge">dynamodb_table</code> - the name of your DynamoDB table (not the ARN!)</li>
  <li><code class="language-plaintext highlighter-rouge">region</code> - the AWS Region</li>
</ul>
<p>Replace all the placeholders in the <code class="language-plaintext highlighter-rouge">backend-*.conf</code> files. There are two placeholders for development and production environments, respectively. Refer to the following example as a reference:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bucket         = "atko-okta-terraform"
key            = "dev/terraform.tfstate"
dynamodb_table = "atko-okta-terraform-dev"
region         = "ap-southeast-2"
</code></pre></div></div>
<h4 id="terraform-variables-tfvars">Terraform variables (tfvars)</h4>
<p>Variables are a critical component within the infrastructure as code configurations allow you to have a single set of configurations while maintaining environment-specific values. Within Terraform, one way to manage such environment-specific values is using ‚Äòtfvars‚Äô files. The ‚Äòtfvars‚Äô file contains a set of variable values specific to an environment. It is passed in via the Terraform CLI in our GitHub Actions workflow when running specific parts of the workflow.</p>
<p>Additional configuration-related variables stored within the <code class="language-plaintext highlighter-rouge">vars-*.tfvars</code> files require updates. Within these files, you‚Äôll find placeholders for the following:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">region</code> - the AWS Region</li>
  <li><code class="language-plaintext highlighter-rouge">okta_org_name</code> - the prefix value for your Okta tenant</li>
  <li><code class="language-plaintext highlighter-rouge">okta_base_url</code> - the base or suffix value for your Okta tenant</li>
  <li><code class="language-plaintext highlighter-rouge">okta_scopes</code> - the scopes for the Terraform Okta OAuth 2.0 client application</li>
  <li><code class="language-plaintext highlighter-rouge">okta_client_id</code> - the client ID for the Terraform Okta OAuth 2.0 client application</li>
  <li><code class="language-plaintext highlighter-rouge">okta_private_key_id</code> - the private key ID for the Terraform Okta OAuth 2.0 client application. This is the ‚ÄòKID‚Äô value, which can be obtained in the ‚ÄòPublic Keys‚Äô section of the OAuth 2.0 application configuration</li>
  <li><code class="language-plaintext highlighter-rouge">okta_secret_id</code> - the AWS Secrets Manager ‚Äòsecret name‚Äô for the private key of the Terraform Okta OAuth 2.0 client application. This is the ‚ÄòSecret name‚Äô value, not the ‚ÄòSecret ARN‚Äô.</li>
</ul>
<p>Replace all the placeholders in the <code class="language-plaintext highlighter-rouge">vars-*.tfvars</code> files. Refer to the following example as a reference:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>region            = "ap-southeast-2"
okta_org_name     = "atko"
okta_base_url     = "oktapreview.com"
okta_scopes       = [
  "okta.groups.manage"
]
okta_client_id    = "0oaes123y1FekjfoE1d7"
okta_private_key_id = "ievOgRgNc...aJJn5ra_4"
okta_secret_id    = "dev/okta_terraform_key"
</code></pre></div></div>
<h3 id="connect-terraform-code-to-okta-resources">Connect Terraform code to Okta resources</h3>
<p>The repository includes a directory module containing a resource okta_groups.tf, which we will use to provide a group for your Okta tenant. In doing so, we‚Äôll also go through a core tenet of the previously mentioned variables, where we will define both input and output variables. This may be a little confusing initially, so take some time to understand how the different files and modules interact! The following diagram may help contextualize the various files we are going to step through:</p>
<p><img src="/assets-jekyll/blog/terraform-ci-cd/module-files-d4f4545f9d3b7e54876d72355b6c782240e98fa85da5781da7c99213ea30e307.jpg" alt="The parent module contains tfvars, which contains variable values that lead to main.ts. This then has reference variables which lead " width="800" /></p>
<p>Open <code class="language-plaintext highlighter-rouge">terraform/modules/directory/variables.tf</code> and uncomment the following entry. This is the variables file for the directory module and it defines which input variables are required. Each module you develop will have its own variables file.</p>
<div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">variable</span> <span class="s2">"okta_group_name"</span> <span class="p">{</span>
  <span class="nx">type</span> <span class="p">=</span> <span class="nx">string</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Open <code class="language-plaintext highlighter-rouge">terraform/modules/directory/okta_groups.tf</code> and uncomment the following entry. This is a resource block. The resource block has two parts: firstly, the resource type, <code class="language-plaintext highlighter-rouge">okta_group</code> , and the resource name, <code class="language-plaintext highlighter-rouge">okta_test_group</code>. Feel free to change the resource block name (okta_test_group) to something you choose. Within the resource block body are the configuration arguments for the resource. We have one argument defined, which is the name,  referencing the input variable okta_group_name</p>
<div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">resource</span> <span class="s2">"okta_group"</span> <span class="s2">"okta_test_group"</span> <span class="p">{</span>
  <span class="nx">name</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">okta_group_name</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Open <code class="language-plaintext highlighter-rouge">terraform/variables.tf</code> and uncomment the following entry. This is the variables file for the parent or main module. The variables within this file are assigned via the <code class="language-plaintext highlighter-rouge">tfvars</code> files, which are passed in with environment-specific configurations via the Terraform CLI:</p>
<div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">variable</span> <span class="s2">"okta_group_name"</span> <span class="p">{</span>
  <span class="nx">type</span> <span class="p">=</span> <span class="nx">string</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Next, open <code class="language-plaintext highlighter-rouge">terraform/main.tf</code> and uncomment the following entry. The main file contains critical configurations for the backend and providers (like Okta or AWS). It also is where we reference any modules, including the directory module, via their path within the local repository. It‚Äôs also necessary to pass through any variables within this module block. You can manage variables in two ways:</p>
<ol>
  <li>Configure the variable values directly within the main file, which may be acceptable for any standardized or non-environment-specific variables</li>
  <li>Reference the parent module variables file like we have done, so in this example:</li>
</ol>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>okta_group_name = var.okta_group_name
</code></pre></div></div>
<p>Open <code class="language-plaintext highlighter-rouge">terraform/dev.tfvars</code> and <code class="language-plaintext highlighter-rouge">terraform/prod.tfvars</code> and uncomment the following entry. This sets the value of the okta_group_name variable for each respective environment. Feel free to change it and make the values environment-specific.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>okta_group_name = "Okta Test Group GitHub Actions"
</code></pre></div></div>
<p>Now, we can stage our changes. Use <code class="language-plaintext highlighter-rouge">git add</code> to add the changes for the next commit.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add <span class="nb">.</span>
</code></pre></div></div>
<p>Lastly, commit the changes:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git commit <span class="nt">-m</span> <span class="s2">"Initial commit"</span>
</code></pre></div></div>
<p>With the changes committed, we can now push your changes to the remote <code class="language-plaintext highlighter-rouge">develop</code> branch.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push origin develop
</code></pre></div></div>
<h3 id="github-actions-triggers-terraform-dev-build">GitHub Actions triggers Terraform dev build</h3>
<p>GitHub Actions is configured to trigger a build when changes are pushed to the <code class="language-plaintext highlighter-rouge">develop</code> branch. The workflow defined in the repository will:</p>
<ul>
  <li><strong>Authenticate with AWS</strong>: Use GitHub OIDC to assume the necessary role.</li>
  <li><strong>Run Terraform Commands</strong>: Execute terraform init, terraform plan, and terraform apply to deploy changes to the development environment.</li>
</ul>
<p>Monitor the action in GitHub to ensure the build completes successfully, and check your Okta environment to observe the creation of the group using the name specified in the tfvars file.</p>
<blockquote>
  <p>If GitHub Actions has any errors, refer to the error message within the GitHub Actions workflow for further details.</p>
  <p>If you missed any configurations within the repository files (e.g., <code class="language-plaintext highlighter-rouge">backend-*.conf</code> or <code class="language-plaintext highlighter-rouge">vars-*.tfvars</code>), make the changes locally and perform the <code class="language-plaintext highlighter-rouge">git add</code>, <code class="language-plaintext highlighter-rouge">git commit</code>, and <code class="language-plaintext highlighter-rouge">git push</code> commands again.</p>
  <p>If you missed any configurations within Okta (e.g., OAuth 2.0 scopes) or AWS (e.g., IAM Role permissions, etc.), then correct the issue and re-run the GitHub Actions workflow from the GitHub Actions console on a failed workflow.</p>
</blockquote>
<p>Create a pull request to merge code from the <code class="language-plaintext highlighter-rouge">develop</code> branch to the <code class="language-plaintext highlighter-rouge">main</code> branch:</p>
<ul>
  <li>Navigate to the repository on GitHub.</li>
  <li>Open a pull request from <code class="language-plaintext highlighter-rouge">develop</code> to <code class="language-plaintext highlighter-rouge">main.</code></li>
  <li>Provide a detailed description of the changes and any context or considerations for the reviewers.</li>
</ul>
<h3 id="github-actions-trigger-terraform-prod-plan">GitHub Actions trigger Terraform prod plan</h3>
<p>When a pull request is opened, GitHub Actions triggers a Terraform plan for the production environment. This plan will:</p>
<ul>
  <li><strong>Authenticate with AWS</strong>: Use GitHub OIDC to assume the necessary role.</li>
  <li><strong>Run Terraform Plan</strong>: Execute terraform init,  terraform plan to show the potential changes without applying them against the production environment.</li>
</ul>
<p>Reviewers can inspect the planned output to understand the impact of the changes before merging.</p>
<p>After reviewing and approving the pull request, merge it into the <code class="language-plaintext highlighter-rouge">main</code> branch. You can merge using the GitHub Pull Request user interface.</p>
<h3 id="github-actions-trigger-terraform-prod-build">GitHub Actions trigger Terraform prod build</h3>
<p>Merging to the main branch triggers a new GitHub Actions workflow. The workflow will:</p>
<ul>
  <li><strong>Authenticate with AWS</strong>: Use GitHub OIDC to assume the necessary role.</li>
  <li><strong>Run Terraform Commands</strong>: Execute terraform init, terraform plan, and terraform apply to deploy changes to the production environment.</li>
</ul>
<p>Monitor the Actions tab to ensure the deployment completes successfully.</p>
<h2 id="learn-more-about-okta-terraform-cicd-patterns-and-oauth-20">Learn more about Okta, Terraform, CI/CD patterns, and OAuth 2.0</h2>
<p>In this article, we have outlined the architecture and steps needed to set up a secure and efficient CI/CD pipeline using GitHub Actions, Terraform, AWS, and Okta. By leveraging these technologies, we can automate infrastructure management, ensuring consistency and reducing the risk of manual errors. We covered the integration of GitHub with AWS for secure authentication and authorization, the configuration of Terraform for state management and secrets handling, and the overall workflow for deploying changes from development to production. If you found this post interesting, you may like these resources:</p>
<ul>
  <li><a href="/blog/2021/12/02/k8s-security-best-practices">How to Secure Your Kubernetes Clusters With Best Practices</a></li>
  <li><a href="/blog/2022/04/14/where-okta-meets-devops">How Can DevOps Engineers Use Okta?</a></li>
  <li><a href="/blog/2019/06/04/store-secrets-securely-int-dotnet-with-azure-keyvault">Store ASP.NET Secrets Securely with Azure KeyVault</a></li>
  <li><a href="/blog/2022/01/19/deploy-dotnet-container-aws-fargate">How to Deploy a .NET Container with AWS ECS Fargate</a></li>
</ul>
<p>Stay tuned for subsequent articles for Okta recommended policies to help get you started with secure-by-design configurations from day one!</p>
<p>Remember to follow us on <a href="https://twitter.com/oktadev">Twitter</a> and subscribe to our <a href="https://www.youtube.com/c/OktaDev/">YouTube channel</a> for more exciting content. Leave us a comment below if you have any questions or requests for topics!</p>
Fri, 11 Oct 2024 00:00:00 -0500
https://developer.okta.com/blog/2024/10/11/terraform-ci-cd
https://developer.okta.com/blog/2024/10/11/terraform-ci-cd
Propel Your SaaS Apps Into the Future at Oktane
<p>We‚Äôve been discussing and reflecting on the Future of Identity over the last couple of months. It‚Äôs apparent to us that Identity is rapidly growing in its complexity. The surface area that our customers need to protect is growing, like a sunrise revealing a hidden terrain in the morning twilight. We realize that in a short time, the <strong>growing demands of customers will start to influence the roadmaps of SaaS companies and their developers to keep pace with protecting their customers and differentiating their value in their respective markets.</strong> The timing of this discussion couldn‚Äôt be better! We would love to meet you, hear about your vision and challenges, and nerd out on Identity and Software Development. Join us at Caesars Forum in Las Vegas, NV, on October 15-17, 2024, for <a href="https://www.okta.com/oktane">Oktane</a>, the biggest identity event of the year, and learn how to propel your SaaS apps into the future by connecting with Okta!</p>
<blockquote>
  <p>If you are currently not attending Oktane (but would like to) and you build SaaS apps, please reach out to us at <code class="language-plaintext highlighter-rouge">dev-advocacy</code> at okta dot com to request information regarding how you can obtain a pass. Limited number of passes available so reach out soon!</p>
</blockquote>
<p>We planned fantastic events to help you take your SaaS apps to the next level by leveraging Okta‚Äôs identity and user lifecycle platforms. Find us and let‚Äôs chat at these activities:</p>
<h2 id="breakout-sessions">Breakout sessions</h2>
<p><strong>Building a SaaS Application with CIC</strong> <br />
Wednesday Oct 16, 3:45 PM</p>
<p><strong>Empower your Ecosystem with Okta</strong> <br />
Thursday Oct 17, 12:45 PM</p>
<p><strong>B2B SaaS App of the Future</strong> <br />
Thursday Oct 17, 2:30 PM</p>
<h2 id="stop-by-the-oktane-dev-hub">Stop by the Oktane Dev Hub</h2>
<p>Take a drive through the Oktane Expo Hall, and you‚Äôll find the SaaS B2B experience in the Dev Hub at the intersection of SaaS Way and Integration Drive. Here, you‚Äôll discover the ways Okta can help you create secure B2B SaaS applications. You‚Äôll learn about identity and user lifecycle management best practices. Then build these standards-compliant solutions into your apps so you can submit them to the <a href="https://www.okta.com/okta-integration-network/">Okta Integration Network</a> (OIN) and watch your customer base grow!</p>
<h2 id="check-out-the-oktane-hands-on-labs-for-interactive-learning-opportunities">Check out the Oktane Hands-on Labs for interactive learning opportunities</h2>
<p>Roll up your sleeves and get your coding on. This is your chance to get techy and build code using Okta solutions. Find us at labs where you can pick from options such as:</p>
<p><strong>Scaling Okta App Management by Importing Data from PowerShell into Terraform</strong> <br />
Streamline and scale your Okta app management by using PowerShell to export configurations and use Terraform to automate environment transitions.</p>
<p><strong>Universal Logout: Instantly Sign a User Out across All Your Apps</strong> <br />
Learn how to lock down all your apps and protect your customers completely at the first sign of trouble with one API!</p>
<p><strong>Identify Inactive Okta Users with Okta Workflows</strong> <br />
Determine if you have unused accounts that might have been missed by some manual deprovisioning process.</p>
<p>Labs are first-come-first-serve and have limited capacity. If there‚Äôs a lab you‚Äôre interested in, be sure to show up on time!</p>
<h2 id="b2b-saas-builders-happy-hour">B2B SaaS builders happy hour</h2>
<p>Join us at a special event for those who build apps that connect with Okta for their customer base! This happy hour is where all the fun and connections happen. This is a private event exclusively for techy folk who build multi-tenant B2B SaaS applications and want to offer Okta Identity Provider connections as an option for their customers. Does this describe you and are you interested in attending this event? Please contact us at <code class="language-plaintext highlighter-rouge">dev-advocacy</code> at okta dot com to be added to our guest list. You must be an attendee at Oktane to attend this happy hour.</p>
<h2 id="okta-workflows-community-meetup">Okta Workflows community meetup</h2>
<p>Join the <a href="https://www.meetup.com/okta-workflows/events/303467311">Okta Workflows community meetup</a> during Oktane 2024 in Las Vegas. Meet Workflows community members, colleagues, and friends over drinks and delicious appetizers.</p>
<h2 id="find-resources-solutions-and-networking-opportunities-at-oktane">Find resources, solutions, and networking opportunities at Oktane</h2>
<p>We‚Äôre excited to connect with you and learn about your application‚Äôs needs! Please find us at Oktane, and feel free to comment if you have any questions or requests in the meantime.</p>
<p>Remember to follow us on <a href="https://twitter.com/oktadev">Twitter</a> and subscribe to our <a href="https://www.youtube.com/c/OktaDev/">YouTube channel</a> for exciting content.</p>
Thu, 26 Sep 2024 00:00:00 -0500
https://developer.okta.com/blog/2024/09/26/oktane-saas-developers
https://developer.okta.com/blog/2024/09/26/oktane-saas-developers