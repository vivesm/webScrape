Recipe Lifecycle Management - インポート | Workato Docs
/
docs
Product Updates
Status Page
Automation Institute
日本語
Get a trial
/
docs
Product Updates
Status Page
Automation Institute
English
日本語
Get a trial
プラットフォーム ドキュメント
Workflow Apps
プロセスオートメーション
Insights
Workbot
データオーケストレーション
API プラットフォーム
イベントストリーム
コネクター
エージェント ドキュメント
機能を詳しく見る
はじめに
レシピの設計
AI機能
Workato Genie
オンプレミス接続
トラブルシューティング
組織とワークスペース
セキュリティ
レシピの管理
コネクターの SDK
開発者用 API
Embedded
Workato Embedded API
アクセラレータ
レシピの管理
Recipe Lifecycle Management
#
インポート : デプロイメント
この機能が気に入りましたか。Environments 機能もご検討ください。
Recipe lifecycle management (RLCM) を気に入られたのであれば、
Environments 機能
もお勧めします。
RLCM と同じ原則を基に構築されている Environments 機能は、統合されたワークスペース全体でのシームレスなデプロイメントエクスペリエンスを実現します。
ご確認ください。
Workato インスタンスにレシピと依存関係をインポートするには、
エクスポートした
アセットを含むパッケージが必要です。パッケージのインポートは、完成したレシピを Workato インスタンスにデプロイメントするための、レシピ開発ライフサイクルの最後のステップです。
新しい環境にテスト済みのパッケージをデプロイメントするには、以下のような複数の方法があります。
パッケージインポート UI
パッケージの zip ファイルは、パッケージインポート UI を使用して手動でデプロイメントできます。
デプロイメント API
パッケージの zip ファイルは、Workato の
プラットフォーム API
を使用してデプロイメントできます。
例 : cURL リクエストを使用して CI/CD サーバーからデプロイメントを開始できます。
#
内容
このセクションでは、Workato のレシピと依存関係をデプロイメント (インポート) する方法を説明します。パッケージを既にインポートしている場合は、外部ソース管理システムの使用に関する最後のセクションに進んでください。
ライフサイクル管理の計画
エクスポート: レシピと依存関係のパッケージ化
インポート : デプロイメント
(このセクション)
外部ソース管理システムの使用
#
インポートプロセス
インポート時に、インポート先のフォルダーを選択できます。このフォルダーは、既に存在している必要があります。名前付けスキームによって、インポートに使用されるフォルダーを明確にすることをお勧めします。
レシピの開発ライフサイクルのメインページに移動します。
レシピの開発ライフサイクルページから、[Import] タブを選択して開始します。
インポート先のフォルダーを選択して、インポートプロセスを開始します。インポート先のフォルダーのリストに対象のフォルダーが表示されていない場合は、[Import package to new folder] を選択します。
インポート先のフォルダーとコンピューターからインポートする .zip ファイルを選択します。ウィザードが開き、パッケージの読み取りとそのコンテンツの読み込みが開始されます。また、アカウント内の対応するレシピと依存関係が比較され、変更がないか確認されます。
#
インポートステータスタグ
インポートプレビュー画面では、各項目にインポートステータスを示すタグが割り当てられます。
#
レシピ
インポートするレシピとアセットのステータスタグの例
フォルダーに存在しないレシピが追加された場合は、「Creates a new recipe」というタグが付けられます。
変更されていない既存のレシピには、「No change」というタグが付けられます。
編集された既存のレシピには、「Overwrites recipe」というタグが付けられます。
実行中のレシピを更新する必要がある場合は、「Overwrites running recipe」というタグが付けられます。このレシピは停止され、更新された後に、自動的に再開されます。
#
実行中のレシピの更新
実行中のレシピは停止され、自動的に再開される
更新する必要がある実行中のレシピがある場合は、レビュープロセス後に警告が表示されます。Webhook へサブスクライブされたトリガーを持つレシピは、レシピの更新中にイベントを見落とす可能性があること、また保留中のジョブがあるレシピは停止できないことに注意してください。
停止されたレシピのリストは一時的に保存され、インポートプロセスの完了後に自動的に再開されます。レシピの再開時のエラーは、手動で修正する必要があります。プロセスが完了すると、新しいレシピまたは更新されたレシピと依存関係が正常にインポートされ、再開されるはずです。
インポートプロセス後のレシピの開始時にエラーが生じた場合は、レシピへのリンクを選択し、すべてのエラーを解決してから手動でレシピを再開する必要があります。
レシピの実行を再開する必要があるのは、次のような状況です。
レシピのトリガーまたはトリガー入力を変更したとき
トリガーのコネクションを別のものに切り替えたとき
#
コネクション
ライフサイクルフェーズごとにアカウントを分ける主な利点の1つは、各アカウントにさまざまに異なる独自のコネクションのセットを割り当てられることです。たとえば、開発アカウントでは、レシピに対してアプリケーションサンドボックスアカウントを使用し、本番アカウントでは、実際のデータを含む本番アプリケーションアカウントを使用することができます。
セキュリティ上の理由により、パッケージのエクスポートでは、アプリケーションへのコネクションを確立するために必要な資格情報、鍵、その他のプライベートデータはエクスポートされません。これにより、機密性が保持されます。コネクション名、アプリケーションタイプ、およびその他の機密性の高くない情報のみがエクスポートされます。ここでは、プレースホルダコネクションが作成されます。このプレースホルダには、アプリケーションとコネクション名のみが含まれます。
インポート後にこのプレースホルダに対する認証が必要です。
パッケージをインポートする場合、インポートしているアカウントの既存のコネクションを使用して、コネクションの詳細の自動入力が試行されます。また、この
コネクションタイプが存在
すること、およびそのタイプの
複数のコネクション
(複数の Gmail アカウントなど) がないことが確認されます上記の条件を満たしている場合、インポートしたレシピで要求されるコネクションが自動的に設定されます。これが不可能な場合、インポート後にレシピに必要なコネクションを手動で再確立する必要が生じることがあります。
#
Lookup table
zip ファイル内の Lookup table には常にスキーマデータ (名前と列名) が含まれますが、データが含まれるとは限りません。インポート中に、テーブルデータを上書きするか無視するかを指定できます。
Lookup table にいかなるデータも含まれない場合は、列名のみで作成または更新されます。Lookup table にデータが含まれる場合は、ラジオボタンを使用して、データを上書きするか無視するかを選択します。
インポートする個々の Lookup table に対する「データのインポート」または「データの無視」
[Overwrite] を選択すると、すべてのテーブルデータが上書きされ、テーブル内のすべてのデータが永続的に置き換えられます。[Ignore] を選択すると、テーブルをデータと共にエクスポートした場合でも、すべてのテーブルデータが無視されます。
上記のオプションを使用するためのルールと手順を確立することが推奨されます。最もシンプルなアプローチでは、デフォルトの設定を使用します。つまり、エクスポートでは [Include data]、インポートでは [Overwrite data] を選択します。ただし、これはインポートするパッケージに含まれていないレシピに影響を与えずに、インポートするアカウントの Lookup table を安全に上書きできる場合に限られます。
#
その他の依存関係
その他のレシピの依存関係には、それぞれのステータスに従って以下のタグが付けられます。
新しいレシピや依存関係が追加される ([Creates a new dependency])。
変更が検出されない場合、アセットには [
No change
] タグが付けられる
現在のレシピや依存関係が、インポートに含まれる変更で上書きされる ([Overwrites dependency])。
#
パッケージのインポートの動作
以下の表では、インポートしたパッケージのアセットがどのように Workato アカウントに移動するかを詳述します。
依存関係のタイプ
パッケージのインポート時に実行される処理
場所
レシピ
フォルダー内に同じ名前のレシピがある場合は、そのレシピが
上書き
されます。
フォルダー内に同じ名前のレシピがない場合は、新しいレシピが
作成
されます。
選択したフォルダー
カスタムコネクター
Workato アカウントに同じ名前のコネクターが既に存在する場合は、既存のカスタムコネクターが上書きされます。Workato アカウント内に同じ名前のコネクターがない場合は、新しいコネクターが作成されます。
Connector SDK
コネクション
コネクションプレースホルダが作成されます。ユーザーは、インポート後にアプリケーションを接続する必要があります。同じ名前のコネクションが既に存在する場合は、何も実行されません。
App Connections
Lookup table
ヘッダー行付きの Lookup table が作成されます。エクスポートおよびインポート中に選択した場合は、Lookup table データがインポートされます。
Lookup table
プロパティ
Workato アカウントの既存のプロパティにプロパティが追加されます。同じ名前のプロパティが既に存在する場合は、何も実行されません。
アカウントプロパティ
Common data models
Workato アカウント内の既存の共有スキーマに対してスキーマが追加され、同じ名前のスキーマが既に存在する場合はそのスキーマが更新されます。
Common data models
Message templates
Workato アカウント内の既存のテンプレートに対してメッセージテンプレートが追加され、同じ名前のテンプレートが既に存在する場合はそのテンプレートが更新されます。
Message templates
←
エクスポート（パッケージ化）
外部ソース管理システムの使用
→
Last updated:
2023/8/31 1:07:14
On this page
内容
インポートプロセス
インポートステータスタグ
パッケージのインポートの動作
Product
How it works
Pricing
What's New
Recipes
Security
Documentation
Product blog
Solutions
HR
Sales
Marketing
Finance
Support
IT
Product (Embed)
Higher Ed
Revenue Operations
Resources
Docs
Customer Success
Content Library
Systematic Community
Workato for Slack
Workato for Microsoft Teams
Use cases
Product Led Sales
Order to Cash
Employee Onboarding
Embedded Integrations
Enterprise iPaaS
IT Help Desk
All use cases >
Applications
Salesforce
Slack
Marketo
NetSuite
ServiceNow
Workday
All Apps >
Company
About us
Customers
Blog
Press
Careers
Partners
Events
© Workato 2025
Privacy
Legal
Sitemap
Contact: (844) 469-6752
The trademarks WORKATO®, WORKBOT® and WORK JAM® are registered in U.S. Patent & Trademark Office to Workato,
Inc.